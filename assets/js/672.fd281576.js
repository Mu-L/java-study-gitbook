(window.webpackJsonp=window.webpackJsonp||[]).push([[672],{1047:function(t,s,a){"use strict";a.r(s);var n=a(26),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"系统高并发-限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统高并发-限流"}},[t._v("#")]),t._v(" 系统高并发-限流")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("高并发实现的三板斧：缓存，限流和降级")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"_1-什么是限流-为什么要限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是限流-为什么要限流"}},[t._v("#")]),t._v(" 1. 什么是限流？为什么要限流？")]),t._v(" "),a("p",[t._v("程序处理请求的能力也是有限的，一旦请求多到超出它的处理极限就会崩溃。")]),t._v(" "),a("p",[a("strong",[t._v("限流(Ratelimiting)指对应用服务的请求进行限制")]),t._v("，例如某一接口的请求限制为 100 个每秒,对超过限制的请求则进行快速失败或丢弃。")]),t._v(" "),a("blockquote",[a("p",[t._v("限流是保证系统高可用的重要手段！")]),t._v(" "),a("p",[t._v("由于互联网公司的流量巨大，系统上线会做一个流量峰值的评估，尤其是像各种秒杀促销活动，为了保证系统不被巨大的流量压垮，会在系统流量到达一定阈值时，拒绝掉一部分流量。")]),t._v(" "),a("p",[t._v("限流会导致用户在短时间内（这个时间段是毫秒级的）系统不可用，一般我们衡量系统处理能力的指标是每秒的QPS或者TPS，假设系统每秒的流量阈值是1000，理论上一秒内有第1001个请求进来时，那么这个请求就会被限流。")])]),t._v(" "),a("h2",{attrs:{id:"_2-限流的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-限流的作用"}},[t._v("#")]),t._v(" 2. 限流的作用")]),t._v(" "),a("p",[t._v("限流可以应对：")]),t._v(" "),a("ul",[a("li",[t._v("热点业务带来的突发请求；")]),t._v(" "),a("li",[t._v("调用方 bug 导致的突发请求；")]),t._v(" "),a("li",[t._v("恶意攻击请求。")])]),t._v(" "),a("p",[t._v("因此，"),a("strong",[t._v("对于公开的接口最好采取限流措施")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"_3-限流方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-限流方案"}},[t._v("#")]),t._v(" 3. 限流方案")]),t._v(" "),a("h3",{attrs:{id:"_3-1-计数器算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-计数器算法"}},[t._v("#")]),t._v(" 3.1 计数器算法")]),t._v(" "),a("p",[t._v("Java内部也可以通过原子类计数器AtomicInteger、Semaphore信号量来做简单的限流。")]),t._v(" "),a("h4",{attrs:{id:"_3-1-1-实现思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-实现思路"}},[t._v("#")]),t._v(" 3.1.1 实现思路：")]),t._v(" "),a("ol",[a("li",[t._v("一般我们会限制一秒钟的能够通过的请求数，比如限流qps为100，")]),t._v(" "),a("li",[t._v("算法的实现思路就是从第一个请求进来开始计时")]),t._v(" "),a("li",[t._v("在接下来的1s内，每来一个请求，就把计数加1")]),t._v(" "),a("li",[t._v("如果累加的数字达到100，那么后续的请求就会被全部拒绝")]),t._v(" "),a("li",[t._v("等到1s结束后，把计数恢复成0，重新开始计数")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 限流的个数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxCount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指定的时间内")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" interval "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原子类计数器")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" atomicInteger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 起始时间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" startTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("limit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" maxCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" interval"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    atomicInteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAndGet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("atomicInteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        startTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        atomicInteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAndGet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 超过了间隔时间，直接重新开始计数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" startTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" interval "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        startTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentTimeMillis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        atomicInteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 还在间隔时间内,check有没有超过限流的个数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("atomicInteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" maxCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),a("h3",{attrs:{id:"_3-2-漏桶算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-漏桶算法"}},[t._v("#")]),t._v(" 3.2 漏桶算法")]),t._v(" "),a("p",[t._v("漏桶算法思路很简单，我们把水比作是请求，"),a("strong",[t._v("漏桶比作是系统处理能力极限")]),t._v("，水先进入到漏桶里，漏桶里的"),a("strong",[t._v("水按一定速率流出")]),t._v("，当流出的速率小于流入的速率时，由于"),a("strong",[t._v("漏桶容量有限，后续进入的水直接溢出（拒绝请求）")]),t._v("，以此实现限流。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220610211108002.png",alt:"image-20220610211108002"}})]),t._v(" "),a("h4",{attrs:{id:"_3-2-1-实现思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-实现思路"}},[t._v("#")]),t._v(" 3.2.1 实现思路：")]),t._v(" "),a("ul",[a("li",[t._v("可以准备一个队列，用来保存请求，")]),t._v(" "),a("li",[t._v("另外通过一个线程池定期从队列中获取请求并执行，可以一次性获取多个并发执行")])]),t._v(" "),a("p",[t._v("**弊端：**无法对应短时间的突发流量")]),t._v(" "),a("h3",{attrs:{id:"_3-3-令牌桶算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-令牌桶算法"}},[t._v("#")]),t._v(" 3.3 令牌桶算法")]),t._v(" "),a("blockquote",[a("p",[t._v("从某种意义上，令牌桶是对漏桶算法的一种改进，桶算法能够限制请求调用的速率，而**令牌桶算法能够在限制调用的平均速率的同时还允许一定程度的突发调用")])]),t._v(" "),a("p",[t._v("令牌桶算法的原理也比较简单，我们可以理解成医院的挂号看病，只有拿到号以后才可以进行诊病。")]),t._v(" "),a("p",[t._v("系统会维护一个令牌（token）桶，"),a("strong",[t._v("以一个恒定的速度往桶里放入令牌（token）")]),t._v("，这时如果有请求进来想要被处理，则需要先从桶里获取一个令牌（token），当桶里没有令牌（token）可取时，则该请求将被拒绝服务。"),a("strong",[t._v("令牌桶算法通过控制桶的容量、发放令牌的速率，来达到对请求的限制")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220610211432413.png",alt:"image-20220610211432413"}})]),t._v(" "),a("h4",{attrs:{id:"_3-3-1-实现思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-实现思路"}},[t._v("#")]),t._v(" 3.3.1 实现思路：")]),t._v(" "),a("p",[t._v("可以准备一个队列，用来保存令牌，另外通过一个线程池定期生成令牌放到队列中，每来一个请求，就从队列中获取一个令牌，并继续执行。")]),t._v(" "),a("h3",{attrs:{id:"_3-4-redis-lua"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-redis-lua"}},[t._v("#")]),t._v(" 3.4 Redis + Lua")]),t._v(" "),a("blockquote",[a("p",[t._v("之前介绍的3中都是单机限流，单机限流无法满足五花八门的需求。如")]),t._v(" "),a("ul",[a("li",[t._v("限制某个资源被每个用户或者商户的访问次数，5秒只能访问2次，或者一天只能调用100次，单机限流无法实现，需要集群限流")])]),t._v(" "),a("p",[t._v("如何实现？")]),t._v(" "),a("p",[t._v("为了控制访问次数，肯定需要一个计数器，而且这个计数器只能保存在第三方服务，比如redis")])]),t._v(" "),a("p",[t._v("很多同学不知道Lua是啥？个人理解，Lua脚本和 MySQL数据库的存储过程比较相似，他们执行一组命令，所有命令的执行要么全部成功或者失败，以此达到原子性。也可以把Lua脚本理解为，一段具有业务逻辑的代码块。")]),t._v(" "),a("p",[t._v("而Lua本身就是一种编程语言，虽然redis 官方没有直接提供限流相应的API，但却支持了 Lua 脚本的功能，可以使用它实现复杂的令牌桶或漏桶算法，也是分布式系统中实现限流的主要方式之一。")]),t._v(" "),a("p",[t._v("相比Redis事务，Lua脚本的优点：")]),t._v(" "),a("ul",[a("li",[t._v("减少网络开销：使用Lua脚本，无需向Redis发送多次请求，执行一次即可，减少网络传输")]),t._v(" "),a("li",[t._v("原子操作：Redis将整个Lua脚本作为一个命令执行，原子，无需担心并发")]),t._v(" "),a("li",[t._v("复用：Lua脚本一旦执行，会永久保存 Redis 中，其他客户端可复用")])]),t._v(" "),a("p",[t._v("Lua脚本大致逻辑如下：")]),t._v(" "),a("div",{staticClass:"language-lua extra-class"},[a("pre",{pre:!0,attrs:{class:"language-lua"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 获取调用脚本时传入的第一个key值（用作限流的 key）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" KEYS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 获取调用脚本时传入的第一个参数值（限流大小）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" limit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tonumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ARGV"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 获取当前流量大小")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("local")]),t._v(" curentLimit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tonumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("redis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'get'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 是否超出限流")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" curentLimit "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" limit "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 返回(拒绝)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 没有超出 value + 1")]),t._v("\nredis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"INCRBY"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 设置过期时间")]),t._v("\nredis"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"EXPIRE"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 返回(放行)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])])]),a("ul",[a("li",[t._v("通过KEYS[1] 获取传入的key参数")]),t._v(" "),a("li",[t._v("通过ARGV[1]获取传入的limit参数")]),t._v(" "),a("li",[t._v("redis.call方法，从缓存中get和key相关的值，如果为null那么就返回0")]),t._v(" "),a("li",[t._v("接着判断缓存中记录的数值是否会大于限制大小，如果超出表示该被限流，返回0")]),t._v(" "),a("li",[t._v("如果未超过，那么该key的缓存值+1，并设置过期时间为1秒钟以后，并返回缓存值+1")])]),t._v(" "),a("blockquote",[a("p",[t._v("总的这1秒钟就只有这么多个请求。理论上来说他是令牌桶算法")])]),t._v(" "),a("h3",{attrs:{id:"_3-5-网关层限流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-网关层限流"}},[t._v("#")]),t._v(" 3.5 网关层限流")]),t._v(" "),a("p",[t._v("限流常在网关这一层做，比如Nginx、Openresty、Kong、Zuul、Spring Cloud Gateway等，而像spring cloud - gateway网关限流底层实现原理，就是基于Redis + Lua，通过内置Lua限流脚本的方式。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220610212734116.png",alt:"image-20220610212734116"}})]),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://dockone.io/article/10137",target:"_blank",rel:"noopener noreferrer"}},[t._v("我司用了6年的Redis分布式限流器，可以说是非常厉害了！"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);