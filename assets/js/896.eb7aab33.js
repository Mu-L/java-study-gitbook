(window.webpackJsonp=window.webpackJsonp||[]).push([[896],{1272:function(t,s,n){"use strict";n.r(s);var a=n(26),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"工具类静态方法调用-autowired注入的service类问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工具类静态方法调用-autowired注入的service类问题"}},[t._v("#")]),t._v(" 工具类静态方法调用@Autowired注入的service类问题")]),t._v(" "),n("h2",{attrs:{id:"_1-背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景"}},[t._v("#")]),t._v(" 1. 背景")]),t._v(" "),n("p",[t._v("我们工具类中的方法，经常还需要额外依赖其他类。")]),t._v(" "),n("ul",[n("li",[t._v("如果不设置成静态方法，那么每次还需要引入。")]),t._v(" "),n("li",[t._v("设置静态方法，但是内部的依赖又有问题")])]),t._v(" "),n("h2",{attrs:{id:"_2-解决"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-解决"}},[t._v("#")]),t._v(" 2. 解决")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此处注解不能省却（0）")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyUtils")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyUtils")]),t._v(" myUtils"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 此处是要使用的service需要spring注入（1）\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Autowired")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyService")]),t._v(" myService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 注意此处注解（2）\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@PostConstruct")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        myUtils "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        myUtils"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myService "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 主要使用场景（3）\n     */")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertParam")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         * 注意此处的调用方法（4）\n         */")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("myService"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("deleteNotifyTime")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])]),n("ul",[n("li",[n("p",[t._v("（0）处作用是将（2）myUtils = this;this进行赋值（注：如果无注解myUtils 将null）")])]),t._v(" "),n("li",[n("p",[t._v("（1）处为spring自动注入，使用spring框架的很常用，但是如果在静态方法中调用此注入类的方法，发现注入为'null'；原因不是spring未注入，而是被static方法给'清空'了，在无法先于static方法初始化之前想了一个办法")])]),t._v(" "),n("li",[n("p",[t._v("（2）通过@PostConstruct修饰的的方法public void init()先给该类赋值，然后通过（1）出注入进来。这样不影响dao等service下面调用的注入！")]),t._v(" "),n("blockquote",[n("p",[t._v("注：@PostConstruct修饰的方法会在服务器加载Servle的时候运行，并且只会被服务器执行一次。PostConstruct在构造函数之后执行,init()方法之前执行。PreDestroy（）方法在destroy()方法执行执行之后执行")])])]),t._v(" "),n("li",[n("p",[t._v("（3）处要处理的特殊方法static（经典是 main（）方法，自己想想基础，它里面可以使用的方法调用的模式）")])]),t._v(" "),n("li",[n("p",[t._v("（4）处是使用这样模式的调用方式deleteNotifyTime现在是作为myUtils的属性")])])]),t._v(" "),n("p",[t._v("需要在工具类中注入Service，由于工具类中方法一般都是静态的，所以要求该属性也要是静态的（Service）。但是由于Spring/SpringBoot正常情况下不能支持注入静态属性（会报空指针异常）。主要原因在于：Spring的依赖注入实际上是依赖于Set方法进行注入值的，Spring是基于对象层面的依赖注入，而静态属性/静态变量实际上是属于类的。")]),t._v(" "),n("h2",{attrs:{id:"参考文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.cnblogs.com/jpfss/p/11271473.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于工具类静态方法调用@Autowired注入的service类问题"),n("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);