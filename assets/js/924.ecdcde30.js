(window.webpackJsonp=window.webpackJsonp||[]).push([[924],{1301:function(t,s,a){"use strict";a.r(s);var n=a(26),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"nginx从入门到实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx从入门到实践"}},[t._v("#")]),t._v(" Nginx从入门到实践")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724221108300.png",alt:"image-20220724221108300"}})]),t._v(" "),a("h2",{attrs:{id:"_1-nginx-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-nginx-介绍"}},[t._v("#")]),t._v(" 1. Nginx 介绍")]),t._v(" "),a("p",[t._v("Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 Nginx 最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是，Nginx 是免费的并可以商业化，配置使用也比较简单。")]),t._v(" "),a("p",[t._v("Nginx 的最重要的几个使用场景：")]),t._v(" "),a("ol",[a("li",[t._v("静态资源服务，通过本地文件系统提供服务；")]),t._v(" "),a("li",[t._v("反向代理服务，延伸出包括缓存、负载均衡等；")]),t._v(" "),a("li",[t._v("API 服务，OpenResty ；")])]),t._v(" "),a("p",[t._v("对于前端来说 Node.js 不陌生了，Nginx 和 Node.js 的很多理念类似，HTTP 服务器、事件驱动、异步非阻塞等，且 Nginx 的大部分功能使用 Node.js 也可以实现，但 Nginx 和 Node.js 并不冲突，都有自己擅长的领域。Nginx 擅长于底层服务器端资源的处理（静态资源处理转发、反向代理，负载均衡等），Node.js 更擅长上层具体业务逻辑的处理，两者可以完美组合，共同助力前端开发。")]),t._v(" "),a("p",[t._v("下面我们着重学习一下 Nginx 的使用。")]),t._v(" "),a("h2",{attrs:{id:"_2-相关概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-相关概念"}},[t._v("#")]),t._v(" 2. 相关概念")]),t._v(" "),a("h3",{attrs:{id:"_2-1-简单请求和非简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-简单请求和非简单请求"}},[t._v("#")]),t._v(" 2.1 简单请求和非简单请求")]),t._v(" "),a("p",[t._v("首先我们来了解一下简单请求和非简单请求，如果同时满足下面两个条件，就属于简单请求：")]),t._v(" "),a("ol",[a("li",[t._v("请求方法是 "),a("code",[t._v("HEAD")]),t._v("、"),a("code",[t._v("GET")]),t._v("、"),a("code",[t._v("POST")]),t._v(" 三种之一；")]),t._v(" "),a("li",[t._v("HTTP 头信息不超过右边着几个字段："),a("code",[t._v("Accept")]),t._v("、"),a("code",[t._v("Accept-Language")]),t._v("、"),a("code",[t._v("Content-Language")]),t._v("、"),a("code",[t._v("Last-Event-ID")]),t._v(" "),a("code",[t._v("Content-Type")]),t._v(" 只限于三个值 "),a("code",[t._v("application/x-www-form-urlencoded")]),t._v("、"),a("code",[t._v("multipart/form-data")]),t._v("、"),a("code",[t._v("text/plain")]),t._v("；")])]),t._v(" "),a("p",[t._v("凡是不同时满足这两个条件的，都属于非简单请求。")]),t._v(" "),a("p",[t._v("浏览器处理简单请求和非简单请求的方式不一样：")]),t._v(" "),a("h4",{attrs:{id:"_2-1-1-简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-简单请求"}},[t._v("#")]),t._v(" 2.1.1 "),a("strong",[t._v("简单请求")])]),t._v(" "),a("p",[t._v("对于简单请求，浏览器会在头信息中增加 "),a("code",[t._v("Origin")]),t._v(" 字段后直接发出，"),a("code",[t._v("Origin")]),t._v(" 字段用来说明，本次请求来自的哪个源（协议+域名+端口）。")]),t._v(" "),a("p",[t._v("如果服务器发现 "),a("code",[t._v("Origin")]),t._v(" 指定的源不在许可范围内，服务器会返回一个正常的 HTTP 回应，浏览器取到回应之后发现回应的头信息中没有包含 "),a("code",[t._v("Access-Control-Allow-Origin")]),t._v(" 字段，就抛出一个错误给 XHR 的 "),a("code",[t._v("error")]),t._v(" 事件；")]),t._v(" "),a("p",[t._v("如果服务器发现 "),a("code",[t._v("Origin")]),t._v(" 指定的域名在许可范围内，服务器返回的响应会多出几个 "),a("code",[t._v("Access-Control-")]),t._v(" 开头的头信息字段。")]),t._v(" "),a("h4",{attrs:{id:"_2-1-2-非简单请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-非简单请求"}},[t._v("#")]),t._v(" 2.1.2 "),a("strong",[t._v("非简单请求")])]),t._v(" "),a("p",[t._v("非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 "),a("code",[t._v("PUT")]),t._v(" 或 "),a("code",[t._v("DELETE")]),t._v("，或 "),a("code",[t._v("Content-Type")]),t._v(" 值为 "),a("code",[t._v("application/json")]),t._v("。浏览器会在正式通信之前，发送一次 HTTP 预检 "),a("code",[t._v("OPTIONS")]),t._v(" 请求，先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 请求方法和头信息字段。只有得到肯定答复，浏览器才会发出正式的 "),a("code",[t._v("XHR")]),t._v(" 请求，否则报错。")]),t._v(" "),a("h3",{attrs:{id:"_2-2-跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-跨域"}},[t._v("#")]),t._v(" 2.2 跨域")]),t._v(" "),a("p",[t._v("在浏览器上当前访问的网站向另一个网站发送请求获取数据的过程就是"),a("strong",[t._v("跨域请求")]),t._v("。")]),t._v(" "),a("p",[t._v("跨域是浏览器的同源策略决定的，是一个重要的浏览器安全策略，用于限制一个 origin的文档或者它加载的脚本与另一个源的资源进行交互，它能够帮助阻隔恶意文档，减少可能被攻击的媒介，可以使用 CORS配置解除这个限制。")]),t._v(" "),a("p",[t._v("关于跨域网上已经有很多解释，这里就不啰嗦，也可以直接看 MDN 的浏览器的同源策略文档进一步了解，这里就列举几个同源和不同元的例子，相信程序员都能看得懂。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同源的例子")]),t._v("\nhttp://example.com/app1/index.html  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只是路径不同")]),t._v("\nhttp://example.com/app2/index.html\n\nhttp://Example.com:80  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只是大小写差异")]),t._v("\nhttp://example.com\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不同源的例子")]),t._v("\nhttp://example.com/app1   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 协议不同")]),t._v("\nhttps://example.com/app2\n\nhttp://example.com        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# host 不同")]),t._v("\nhttp://www.example.com\nhttp://myapp.example.com\n\nhttp://example.com        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 端口不同")]),t._v("\nhttp://example.com:8080\n")])])]),a("h3",{attrs:{id:"_2-3-正向代理和反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-正向代理和反向代理"}},[t._v("#")]),t._v(" 2.3 正向代理和反向代理")]),t._v(" "),a("p",[t._v("反向代理（Reverse Proxy）对应的是正向代理（Forward Proxy），他们的区别：")]),t._v(" "),a("p",[a("strong",[t._v("正向代理：")]),t._v(" 一般的访问流程是客户端直接向目标服务器发送请求并获取内容，使用正向代理后，客户端改为向代理服务器发送请求，并指定目标服务器（原始服务器），然后由代理服务器和原始服务器通信，转交请求并获得的内容，再返回给客户端。正向代理隐藏了真实的客户端，为客户端收发请求，使真实客户端对服务器不可见；")]),t._v(" "),a("p",[t._v("举个具体的例子 🌰，你的浏览器无法直接访问谷哥，这时候可以通过一个代理服务器来帮助你访问谷哥，那么这个服务器就叫正向代理。")]),t._v(" "),a("p",[a("strong",[t._v("反向代理：")]),t._v(" 与一般访问流程相比，使用反向代理后，直接收到请求的服务器是代理服务器，然后将请求转发给内部网络上真正进行处理的服务器，得到的结果返回给客户端。反向代理隐藏了真实的服务器，为服务器收发请求，使真实服务器对客户端不可见。一般在处理跨域请求的时候比较常用。现在基本上所有的大型网站都设置了反向代理。")]),t._v(" "),a("p",[t._v("举个具体的例子 🌰，去饭店吃饭，可以点川菜、粤菜、江浙菜，饭店也分别有三个菜系的厨师 👨‍🍳，但是你作为顾客不用管哪个厨师给你做的菜，只用点菜即可，小二将你菜单中的菜分配给不同的厨师来具体处理，那么这个小二就是反向代理服务器。")]),t._v(" "),a("p",[a("strong",[t._v("简单的说，一般给客户端做代理的都是正向代理，给服务器做代理的就是反向代理。")])]),t._v(" "),a("p",[t._v("正向代理和反向代理主要的原理区别可以参见下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724222601079.png",alt:"image-20220724222601079"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724222610707.png",alt:"image-20220724222610707"}})]),t._v(" "),a("h3",{attrs:{id:"_2-4-负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-负载均衡"}},[t._v("#")]),t._v(" 2.4 负载均衡")]),t._v(" "),a("p",[t._v("一般情况下，客户端发送多个请求到服务器，服务器处理请求，其中一部分可能要操作一些资源比如数据库、静态资源等，服务器处理完毕后，再将结果返回给客户端。")]),t._v(" "),a("p",[t._v("这种模式对于早期的系统来说，功能要求不复杂，且并发请求相对较少的情况下还能胜任，成本也低。随着信息数量不断增长，访问量和数据量飞速增长，以及系统业务复杂度持续增加，这种做法已无法满足要求，并发量特别大时，服务器容易崩。")]),t._v(" "),a("p",[t._v("很明显这是由于服务器性能的瓶颈造成的问题，除了堆机器之外，最重要的做法就是负载均衡。")]),t._v(" "),a("p",[t._v("请求爆发式增长的情况下，单个机器性能再强劲也无法满足要求了，这个时候集群的概念产生了，单个服务器解决不了的问题，可以使用多个服务器，然后将请求分发到各个服务器上，将负载分发到不同的服务器，这就是"),a("strong",[t._v("负载均衡")]),t._v("，核心是「分摊压力」。Nginx 实现负载均衡，一般来说指的是将请求转发给服务器集群。")]),t._v(" "),a("p",[t._v("举个具体的例子 🌰，晚高峰乘坐地铁的时候，入站口经常会有地铁工作人员大喇叭“请走 B 口，B 口人少车空....”，这个工作人员的作用就是负载均衡。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724225746333.png",alt:"image-20220724225746333"}})]),t._v(" "),a("h3",{attrs:{id:"_2-5-动静分离"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-动静分离"}},[t._v("#")]),t._v(" 2.5 动静分离")]),t._v(" "),a("p",[t._v("为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724225816748.png",alt:"image-20220724225816748"}})]),t._v(" "),a("p",[t._v("一般来说，都需要将动态资源和静态资源分开，由于 Nginx 的高并发和静态资源缓存等特性，经常将静态资源部署在 Nginx 上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源的请求，则利用反向代理的原理，把请求转发给对应后台应用去处理，从而实现动静分离。")]),t._v(" "),a("p",[t._v("使用前后端分离后，可以很大程度提升静态资源的访问速度，即使动态服务不可用，静态资源的访问也不会受到影响。")]),t._v(" "),a("h2",{attrs:{id:"_3-nginx-快速安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-nginx-快速安装"}},[t._v("#")]),t._v(" 3. Nginx 快速安装")]),t._v(" "),a("p",[t._v("略")]),t._v(" "),a("h2",{attrs:{id:"_4-nginx-操作常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-nginx-操作常用命令"}},[t._v("#")]),t._v(" 4. Nginx 操作常用命令")]),t._v(" "),a("p",[t._v("Nginx 的命令在控制台中输入 "),a("code",[t._v("nginx -h")]),t._v(" 就可以看到完整的命令，这里列举几个常用的命令：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("nginx -s reload  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 向主进程发送信号，重新加载配置文件，热重启")]),t._v("\nnginx -s reopen\t "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启 Nginx")]),t._v("\nnginx -s stop    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 快速关闭")]),t._v("\nnginx -s quit    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 等待工作进程处理完成后关闭")]),t._v("\nnginx -T         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看当前 Nginx 最终的配置")]),t._v("\nnginx -t -c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("配置路径"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查配置是否有问题，如果已经在配置目录，则不需要-c")]),t._v("\n复制代码\n")])])]),a("p",[a("code",[t._v("systemctl")]),t._v(" 是 Linux 系统应用管理工具 "),a("code",[t._v("systemd")]),t._v(" 的主命令，用于管理系统，我们也可以用它来对 Nginx 进行管理，相关命令如下：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("systemctl start nginx    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 启动 Nginx")]),t._v("\nsystemctl stop nginx     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 停止 Nginx")]),t._v("\nsystemctl restart nginx  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重启 Nginx")]),t._v("\nsystemctl reload nginx   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 重新加载 Nginx，用于修改配置后")]),t._v("\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("enable")]),t._v(" nginx   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置开机启动 Nginx")]),t._v("\nsystemctl disable nginx  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 关闭开机启动 Nginx")]),t._v("\nsystemctl status nginx   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 Nginx 运行状态")]),t._v("\n")])])]),a("h2",{attrs:{id:"_5-nginx-配置语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-nginx-配置语法"}},[t._v("#")]),t._v(" 5. Nginx 配置语法")]),t._v(" "),a("p",[t._v("就跟前面文件作用讲解的图所示，Nginx 的主配置文件是 "),a("code",[t._v("/etc/nginx/nginx.conf")]),t._v("，你可以使用 "),a("code",[t._v("cat -n nginx.conf")]),t._v(" 来查看配置。")]),t._v(" "),a("p",[a("code",[t._v("nginx.conf")]),t._v(" 结构图可以这样概括：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("main        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全局配置，对全局生效")]),t._v("\n├── events  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置影响 Nginx 服务器或与用户的网络连接")]),t._v("\n├── http    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置")]),t._v("\n│   ├── upstream "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置后端服务器具体地址，负载均衡配置不可或缺的部分")]),t._v("\n│   ├── server   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块")]),t._v("\n│   ├── server\n│   │   ├── location  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# server 块可以包含多个 location 块，location 指令用于匹配 uri")]),t._v("\n│   │   ├── location\n│   │   └── "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n│   └── "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n└── "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n复制代码\n")])])]),a("p",[t._v("一个 Nginx 配置文件的结构就像 "),a("code",[t._v("nginx.conf")]),t._v(" 显示的那样，配置文件的语法规则：")]),t._v(" "),a("ol",[a("li",[t._v("配置文件由指令与指令块构成；")]),t._v(" "),a("li",[t._v("每条指令以 "),a("code",[t._v(";")]),t._v(" 分号结尾，指令与参数间以空格符号分隔；")]),t._v(" "),a("li",[t._v("指令块以 "),a("code",[t._v("{}")]),t._v(" 大括号将多条指令组织在一起；")]),t._v(" "),a("li",[a("code",[t._v("include")]),t._v(" 语句允许组合多个配置文件以提升可维护性；")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("#")]),t._v(" 符号添加注释，提高可读性；")]),t._v(" "),a("li",[t._v("使用 "),a("code",[t._v("$")]),t._v(" 符号使用变量；")]),t._v(" "),a("li",[t._v("部分指令的参数支持正则表达式；")])]),t._v(" "),a("h3",{attrs:{id:"_5-1-典型配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-典型配置"}},[t._v("#")]),t._v(" 5.1 典型配置")]),t._v(" "),a("p",[t._v("Nginx 的典型配置：")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v("  nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行用户，默认即是nginx，可以不进行设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("worker_processes")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Nginx 进程数，一般设置为和 CPU 核数一样")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("error_log")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("var"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("log"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log warn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Nginx 的错误日志存放目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pid")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("var"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("run"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Nginx 服务启动时的 pid 存放位置")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("events")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" epoll"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("worker_connections")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 每个进程允许最大并发数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("http")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置日志模式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("log_format")]),t._v("  main  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$remote_addr - $remote_user [$time_local] \"$request\" '")]),t._v("\n                      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$status $body_bytes_sent \"$http_referer\" '")]),t._v("\n                      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'"$http_user_agent" "$http_x_forwarded_for"\'')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("access_log")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("var"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("log"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("access"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log  main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Nginx访问日志存放位置")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sendfile")]),t._v("            on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启高效传输模式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tcp_nopush")]),t._v("          on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 减少网络报文段的数量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("tcp_nodelay")]),t._v("         on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("keepalive_timeout")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 保持连接的时间，也叫超时时间，单位秒")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("types_hash_max_size")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2048")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("etc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("mime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("types")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 文件扩展名与类型映射表")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default_type")]),t._v("        application"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("octet"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("stream"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认文件类型")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("etc"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("conf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 加载子配置项")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("listen")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置监听的端口")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server_name")]),t._v("  localhost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置的域名")]),t._v("\n    \t\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("share"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 网站根目录")]),t._v("\n    \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("htm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认首页文件")]),t._v("\n    \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("deny")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("172.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".22")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 禁止访问的ip地址，可以为all")]),t._v("\n    \t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("allow")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("172.168")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".33")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".44")]),t._v("； "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 允许访问的ip地址，可以为all")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \t\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("error_page")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("502")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("503")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("504")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认50x对应的访问页面")]),t._v("\n    \t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("error_page")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),t._v(" error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 同上")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("server 块可以包含多个 location 块，location 指令用于匹配 uri，语法：")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" uri "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("指令后面：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("=")]),t._v(" 精确匹配路径，用于不含正则表达式的 uri 前，如果匹配成功，不再进行后续的查找；")]),t._v(" "),a("li",[a("code",[t._v("^~")]),t._v(" 用于不含正则表达式的 uri； 前，表示如果该符号后面的字符是最佳匹配，采用该规则，不再进行后续的查找；")]),t._v(" "),a("li",[a("code",[t._v("~")]),t._v(" 表示用该符号后面的正则去匹配路径，区分大小写；")]),t._v(" "),a("li",[a("code",[t._v("~*")]),t._v(" 表示用该符号后面的正则去匹配路径，不区分大小写。跟 "),a("code",[t._v("~")]),t._v(" 优先级都比较低，如有多个location的正则能匹配的话，则使用正则表达式最长的那个；")])]),t._v(" "),a("p",[t._v("如果 uri 包含正则表达式，则必须要有 "),a("code",[t._v("~")]),t._v(" 或 "),a("code",[t._v("~*")]),t._v(" 标志。")]),t._v(" "),a("h3",{attrs:{id:"_5-2-全局变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-全局变量"}},[t._v("#")]),t._v(" 5.2 全局变量")]),t._v(" "),a("p",[t._v("Nginx 有一些常用的全局变量，你可以在配置的任何位置使用它们，如下表：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("全局变量名")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("$host")])]),t._v(" "),a("td",[t._v("请求信息中的 "),a("code",[t._v("Host")]),t._v("，如果请求中没有 "),a("code",[t._v("Host")]),t._v(" 行，则等于设置的服务器名，不包含端口")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$request_method")])]),t._v(" "),a("td",[t._v("客户端请求类型，如 "),a("code",[t._v("GET")]),t._v("、"),a("code",[t._v("POST")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$remote_addr")])]),t._v(" "),a("td",[t._v("客户端的 "),a("code",[t._v("IP")]),t._v(" 地址")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$args")])]),t._v(" "),a("td",[t._v("请求中的参数")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$arg_PARAMETER")])]),t._v(" "),a("td",[a("code",[t._v("GET")]),t._v(" 请求中变量名 PARAMETER 参数的值，例如："),a("code",[t._v("$http_user_agent")]),t._v("(Uaer-Agent 值), "),a("code",[t._v("$http_referer")]),t._v("...")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$content_length")])]),t._v(" "),a("td",[t._v("请求头中的 "),a("code",[t._v("Content-length")]),t._v(" 字段")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$http_user_agent")])]),t._v(" "),a("td",[t._v("客户端agent信息")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$http_cookie")])]),t._v(" "),a("td",[t._v("客户端cookie信息")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$remote_addr")])]),t._v(" "),a("td",[t._v("客户端的IP地址")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$remote_port")])]),t._v(" "),a("td",[t._v("客户端的端口")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$http_user_agent")])]),t._v(" "),a("td",[t._v("客户端agent信息")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$server_protocol")])]),t._v(" "),a("td",[t._v("请求使用的协议，如 "),a("code",[t._v("HTTP/1.0")]),t._v("、"),a("code",[t._v("HTTP/1.1")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$server_addr")])]),t._v(" "),a("td",[t._v("服务器地址")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$server_name")])]),t._v(" "),a("td",[t._v("服务器名称")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$server_port")])]),t._v(" "),a("td",[t._v("服务器的端口号")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$scheme")])]),t._v(" "),a("td",[t._v("HTTP 方法（如http，https）")])])])]),t._v(" "),a("p",[t._v("还有更多的内置预定义变量，可以直接搜索关键字「nginx内置预定义变量」可以看到一堆博客写这个，这些变量都可以在配置文件中直接使用")]),t._v(" "),a("h2",{attrs:{id:"_6-设置二级域名虚拟主机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-设置二级域名虚拟主机"}},[t._v("#")]),t._v(" 6. 设置二级域名虚拟主机")]),t._v(" "),a("p",[t._v("在某某云 ☁️ 上购买了域名之后，就可以配置虚拟主机了，一般配置的路径在 "),a("code",[t._v("域名管理 -> 解析 -> 添加记录")]),t._v(" 中添加二级域名，配置后某某云会把二级域名也解析到我们配置的服务器 IP 上，然后我们在 Nginx 上配置一下虚拟主机的访问监听，就可以拿到从这个二级域名过来的请求了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724231052047.png",alt:"image-20220724231052047"}})]),t._v(" "),a("p",[t._v("现在我自己的服务器上配置了一个 fe 的二级域名，也就是说在外网访问 "),a("code",[t._v("fe.sherlocked93.club")]),t._v(" 的时候，也可以访问到我们的服务器了。")]),t._v(" "),a("p",[t._v("由于默认配置文件 "),a("code",[t._v("/etc/nginx/nginx.conf")]),t._v(" 的 http 模块中有一句 "),a("code",[t._v("include /etc/nginx/conf.d/*.conf")]),t._v(" 也就是说 "),a("code",[t._v("conf.d")]),t._v(" 文件夹下的所有 "),a("code",[t._v("*.conf")]),t._v(" 文件都会作为子配置项被引入配置文件中。为了维护方便，我在 "),a("code",[t._v("/etc/nginx/conf.d")]),t._v(" 文件夹中新建一个 "),a("code",[t._v("fe.sherlocked93.club.conf")]),t._v(" ：")]),t._v(" "),a("div",{staticClass:"language-nginx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-nginx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# /etc/nginx/conf.d/fe.sherlocked93.club.conf")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("listen")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server_name")]),t._v(" fe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sherlocked93"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("club"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("usr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("share"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("fe"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("然后在 "),a("code",[t._v("/usr/share/nginx/html")]),t._v(" 文件夹下新建 fe 文件夹，新建文件 "),a("code",[t._v("index.html")]),t._v("，内容随便写点，改完 "),a("code",[t._v("nginx -s reload")]),t._v(" 重新加载，浏览器中输入 "),a("code",[t._v("fe.sherlocked93.club")]),t._v("，发现从二级域名就可以访问到我们刚刚新建的 fe 文件夹：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220724231559185.png",alt:"image-20220724231559185"}})])])}),[],!1,null,null,null);s.default=e.exports}}]);