(window.webpackJsonp=window.webpackJsonp||[]).push([[593],{969:function(t,s,e){"use strict";e.r(s);var a=e(26),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"js异步解决方案-promise-四"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#js异步解决方案-promise-四"}},[t._v("#")]),t._v(" Js异步解决方案-Promise（四）")]),t._v(" "),e("h2",{attrs:{id:"_1-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[t._v("#")]),t._v(" 1. 简介")]),t._v(" "),e("p",[t._v("ES2015 (ES6)标准化和引入了Promise对象，它是异步编程的一种解决方案")]),t._v(" "),e("p",[t._v("简单来说就是用同步的方式写异步的代码，可用来解决回调问题")]),t._v(" "),e("h2",{attrs:{id:"_2-promise特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-promise特点"}},[t._v("#")]),t._v(" 2. Promise特点")]),t._v(" "),e("h3",{attrs:{id:"_2-1-特点一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-特点一"}},[t._v("#")]),t._v(" 2.1 特点一")]),t._v(" "),e("p",[t._v("Promise，承诺执行，Promise对象的状态是不受外界影响的")]),t._v(" "),e("p",[t._v("Promise对象代表一个异步操作，它有三种状态")]),t._v(" "),e("ul",[e("li",[t._v("进行中 (Pending)")]),t._v(" "),e("li",[t._v("已完成 (Resolved/Fulfilled)")]),t._v(" "),e("li",[t._v("已失败 (Rejected)")])]),t._v(" "),e("p",[t._v("只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态")]),t._v(" "),e("p",[t._v("这就是Promise这个名字的由来，它的英语意思就是"),e("code",[t._v("承诺")]),t._v("，表示其他手段无法改变")]),t._v(" "),e("h3",{attrs:{id:"_2-2-特点二"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-特点二"}},[t._v("#")]),t._v(" 2.2 特点二")]),t._v(" "),e("p",[t._v("Promise对象状态一旦改变，就不会再变")]),t._v(" "),e("p",[t._v("Promise对象的状态改变，只有两种可能")]),t._v(" "),e("ul",[e("li",[t._v("从Pending变为Resolved")]),t._v(" "),e("li",[t._v("从Pending变为Rejected")])]),t._v(" "),e("p",[t._v("只要这两种情况发生，状态就凝固，不会再变了，会一直保持这个结果")]),t._v(" "),e("h2",{attrs:{id:"_3-promise使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-promise使用"}},[t._v("#")]),t._v(" 3. Promise使用")]),t._v(" "),e("p",[t._v("Promise是一个构造函数，我们可以通过"),e("code",[t._v("new")]),t._v("关键字来创建一个Promise实例，也可以直接使用Promise的一些静态方法")]),t._v(" "),e("h3",{attrs:{id:"_3-1-new一个promise实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-new一个promise实例"}},[t._v("#")]),t._v(" 3.1 new一个Promise实例")]),t._v(" "),e("p",[e("strong",[t._v("语法")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("new Promise( function(resolve, reject) {...});\n")])])]),e("p",[e("strong",[t._v("示例")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function fn1(){\n  return new Promise((resolve,reject) => {\n    setTimeout(()=>{\n      let num = Math.ceil(Math.random()*10)\n      if(num < 5){\n        resolve(num)\n      }else{\n        reject('数字太大')\n      }\n    },2000)\n  })\n}\n")])])]),e("p",[t._v("我们使用"),e("code",[t._v("new")]),t._v("关键字创建了一个promise实例，并在函数fn1中"),e("code",[t._v("return")]),t._v("了出来")]),t._v(" "),e("p",[e("code",[t._v("new Promise")]),t._v("创建了一个promise实例，Promise构造函数会把一个叫做处理器函数(executor function)的函数作为它的参数")]),t._v(" "),e("h4",{attrs:{id:"_3-1-1-resolve和reject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-1-resolve和reject"}},[t._v("#")]),t._v(" 3.1.1 resolve"),e("code",[t._v("和")]),t._v("reject")]),t._v(" "),e("p",[t._v("处理器函数接收两个参数分别是"),e("code",[t._v("resolve")]),t._v("和"),e("code",[t._v("reject")]),t._v("，这两个参数也是两个回调函数")]),t._v(" "),e("p",[e("code",[t._v("resolve")]),t._v(" 函数在异步操作成功时调用，并将异步操作的结果，作为参数传递出去")]),t._v(" "),e("p",[e("code",[t._v("reject")]),t._v(" 函数在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去")]),t._v(" "),e("p",[t._v("简单理解就是一个是成功回调，一个是失败回调")]),t._v(" "),e("h3",{attrs:{id:"_3-2-promise-prototype-then"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-promise-prototype-then"}},[t._v("#")]),t._v(" 3.2 Promise.prototype.then()")]),t._v(" "),e("p",[t._v("Promise对象有一个原型方法"),e("code",[t._v("then")])]),t._v(" "),e("p",[t._v("Promise实例生成以后，可以用"),e("code",[t._v("then")]),t._v("方法指定"),e("code",[t._v("resolved")]),t._v("状态和"),e("code",[t._v("reject")]),t._v("状态的回调函数")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onFulfilled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" onRejected"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("code",[t._v("then")]),t._v("方法接收两个回调onFulfilled和onRejected")]),t._v(" "),e("ul",[e("li",[t._v("onFulfilled-可选\n"),e("ul",[e("li",[t._v("当 Promise 变成已完成状态(fulfilled)时调用的回调函数")]),t._v(" "),e("li",[t._v("该函数有一个参数，即接受的最终结果(the fulfillment  value)")]),t._v(" "),e("li",[t._v("如果该参数不是函数，则会在内部被替换为 "),e("code",[t._v("(x) => x")]),t._v("，即原样返回promise最终结果的函数")])])]),t._v(" "),e("li",[t._v("onRejected-可选\n"),e("ul",[e("li",[t._v("当 Promise 变成接受状态或拒绝状态(rejected)时调用的回调函数")]),t._v(" "),e("li",[t._v("该函数有一个参数，即拒绝的原因(rejection reason)")]),t._v(" "),e("li",[t._v("如果该参数不是函数，则会在内部被替换为一个 "),e("code",[t._v("Thrower")]),t._v(" 函数(it throws an error it received as argument)")])])])]),t._v(" "),e("p",[t._v("**"),e("code",[t._v("then")]),t._v("方法在接收一个promise实例后会返回一个新的Promise实例(**并不是原来那个Promise实例)，且原来的promise实例的返回值将作为参数传入这个新Promise的"),e("code",[t._v("resolve")]),t._v("函数")]),t._v(" "),e("p",[t._v("那么既然"),e("code",[t._v("then")]),t._v("方法返回一个新的promise实例，所以我们可以接着使用"),e("code",[t._v("then")]),t._v("方法，即链式调用，也被称为 **复合(composition)**操作")]),t._v(" "),e("p",[t._v("接上面的示例，函数fn1会返回一个promise实例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fn1()\n  .then((data)=>{\n    console.log(data)\n  },(err)=>{\n    console.log(err)\n  })\n")])])]),e("p",[t._v("如上所示，我们使用了"),e("code",[t._v("then")]),t._v("方法的两个参数")]),t._v(" "),e("p",[t._v("第一个参数回调我们很常用，其实就是 Promise 变成已完成状态且拿到传递的值")]),t._v(" "),e("p",[t._v("第二个参数回调就是 Promise 变成接受状态或拒绝状态且拿到错误参数，我们可能用的少，一般都是用"),e("code",[t._v("catch")]),t._v("方法，"),e("code",[t._v("then")]),t._v("方法的第二个参数onRejected和"),e("code",[t._v("catch")]),t._v("还是有一些细微区别的，下面会提到")]),t._v(" "),e("h4",{attrs:{id:"_3-2-1-then方法的特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-1-then方法的特点"}},[t._v("#")]),t._v(" 3.2.1 "),e("code",[t._v("then")]),t._v("方法的特点")]),t._v(" "),e("p",[e("strong",[t._v("首先"),e("code",[t._v("then")]),t._v(" 方法必须返回一个 "),e("code",[t._v("promise")]),t._v(" 对象(划重点)")])]),t._v(" "),e("p",[t._v("链式调用的原理，不论是何种情况then方法都会返回一个新的Promise对象，这样才会有下个then方法")]),t._v(" "),e("p",[e("strong",[t._v("如果"),e("code",[t._v("then")]),t._v("方法中返回的是一个普通值(如Number、String等)就使用此值包装成一个新的Promise对象返回")])]),t._v(" "),e("p",[t._v("就像下面这个例子，"),e("code",[t._v("then")]),t._v("方法接收Promise对象，"),e("code",[t._v("then")]),t._v("方法中返回一个普通值时，下一个"),e("code",[t._v("then")]),t._v("中是可以接到的")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\np"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回了一个普通值")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("strong",[t._v("如果"),e("code",[t._v("then")]),t._v("方法中没有"),e("code",[t._v("return")]),t._v("语句，就返回一个用Undefined包装的Promise对象")])]),t._v(" "),e("p",[t._v("如下面例子的输出结果")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let p = new Promise((resolve, reject) => {\n  resolve(1)\n})\n\np.then(data => {\n  // 无return语句\n}).then(data => {\n  console.log(data) // undefined\n})\n")])])]),e("p",[e("strong",[t._v("如果"),e("code",[t._v("then")]),t._v("方法中出现异常，则调用失败态方法(reject)跳转到下一个"),e("code",[t._v("then")]),t._v("的onRejected")])]),t._v(" "),e("p",[e("code",[t._v("then")]),t._v("方法的第二个参数onRejected是监测不到当前"),e("code",[t._v("then")]),t._v("方法回调异常的，规范中定义当前"),e("code",[t._v("then")]),t._v("方法出现异常则调用失败态方法(reject)流转到下一个"),e("code",[t._v("then")]),t._v("的onRejected")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('let p = new Promise((resolve, reject) => {\n  resolve(1)\n})\n\np.then(data => 2)\n  .then(\n    data => {\n      throw "this is err"\n    },\n    err => {\n      console.log("err1:" + err)\n    }\n  )\n  .then(\n    data => {\n      console.log(data)\n    },\n    err => {\n      console.log("err2:" + err) // err2:this is err\n    }\n  )\n')])])]),e("p",[e("strong",[t._v("如果"),e("code",[t._v("then")]),t._v("方法没有传入任何回调，则继续向下传递(即所谓的值穿透)")])]),t._v(" "),e("p",[t._v("下面示例，在第一个"),e("code",[t._v("then")]),t._v("方法之后连续调用了两个空的"),e("code",[t._v("then")]),t._v("方法 ，没有传入任何回调函数，也没有返回值，此时Promise会将值一直向下传递，直到接收处理，这就是所谓的值穿透")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let p = new Promise((resolve, reject) => {\n  resolve(1)\n})\n\np.then(data => 2)\n.then()\n.then()\n.then(data => {\n  console.log(data) // 2\n})\n复制代码\n")])])]),e("p",[e("strong",[t._v("如果"),e("code",[t._v("then")]),t._v("方法中返回了一个Promise对象，那就以这个对象为准，返回它的结果")])]),t._v(" "),e("p",[t._v("话不多说，来看示例")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let p = new Promise((resolve, reject) => {\n  resolve(1)\n})\n\np.then(data => {\n  return new Promise((resolve, reject) => {\n    resolve(2)\n  })\n}).then(data => {\n  console.log(data) // 2\n})\n")])])]),e("h3",{attrs:{id:"_3-3-promise-prototype-catch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-promise-prototype-catch"}},[t._v("#")]),t._v(" 3.3 Promise.prototype.catch()")]),t._v(" "),e("p",[t._v("除了原型方法"),e("code",[t._v("then")]),t._v("之外，Promise对象还有一个"),e("code",[t._v("catch")]),t._v("的原型方法")]),t._v(" "),e("p",[e("code",[t._v("catch")]),t._v("方法可以用于promise组合中的错误处理，此方法返回一个Promise，并且处理拒绝的情况")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("p.catch(onRejected);\n\np.catch(function(reason) {\n  // 拒绝\n});\n")])])]),e("ul",[e("li",[t._v("onRejected\n"),e("ul",[e("li",[t._v("当Promise 被rejected时，被调用的一个回调函数，该函数拥有一个参数为失败原因或错误信息")])])])]),t._v(" "),e("p",[t._v("简单理解就是捕获异常，promise组合中抛出了错误或promise组合中出现rejected会被捕获")]),t._v(" "),e("p",[t._v("同样接最上面的示例，还使用fn1函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("fn1()\n  .then(data=>{\n    console.log(data)\n  }).catch(err=>{\n    console.log(err)\n  })\n")])])]),e("p",[t._v("使用这种方式捕获错误或失败是不是比"),e("code",[t._v("then")]),t._v("方法的第二个参数看着舒服了点呢，毕竟Promise就是链式到底")]),t._v(" "),e("p",[t._v("同样也需要注意一点，"),e("code",[t._v("catch")]),t._v("方法也返回一个新的promise实例，如果 "),e("code",[t._v("onRejected")]),t._v("回调抛出一个错误或返回一个本身失败的 Promise ，通过 "),e("code",[t._v("catch")]),t._v(" 返回的Promise 会被rejected，否则，它就是一个成功的(resolved)promise实例")]),t._v(" "),e("p",[t._v("和上面的"),e("code",[t._v("then")]),t._v("方法中的第二个参数几乎是一致的，我们看例子")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" err\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("上面的fn1函数有一半的几率返回一个rejected，当返回一个rejected时下面的"),e("code",[t._v("then")]),t._v("方法回调中同样会输出，因为我们在第一个"),e("code",[t._v("catch")]),t._v("中只return了错误信息，并没有抛出错误或者返回一个失败promise，所以第一个"),e("code",[t._v("catch")]),t._v("执行返回的promise对象是resolveing")]),t._v(" "),e("h3",{attrs:{id:"_3-4-promise-prototype-finally"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-promise-prototype-finally"}},[t._v("#")]),t._v(" 3.4 Promise.prototype.finally()")]),t._v(" "),e("p",[t._v("finally，英文是"),e("code",[t._v("最后")]),t._v("的意思，此方法是"),e("code",[t._v("ES2018")]),t._v("的标准")]),t._v(" "),e("p",[t._v("原型方法"),e("code",[t._v("finally")]),t._v("，我们使用的可能不多，语法如下")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("p.finally(onFinally);\n\np.finally(function() {\n  // 返回状态为(resolved 或 rejected)\n});\n复制代码\n")])])]),e("p",[t._v("一句话即可解释"),e("code",[t._v("finally")]),t._v("，在promise结束时，不管成功还是失败都将执行其"),e("code",[t._v("onFinally")]),t._v("回调，该回调无参数")]),t._v(" "),e("p",[t._v("适用于同样的语句需要在"),e("code",[t._v("then()")]),t._v("和"),e("code",[t._v("catch()")]),t._v("中各写一次的情况")]),t._v(" "),e("h3",{attrs:{id:"_3-5-promise-resolve"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-promise-resolve"}},[t._v("#")]),t._v(" 3.5 Promise.resolve()")]),t._v(" "),e("p",[t._v("一句话概括Promise.resolve()方法，接收一个值，将现有对象转为Promise 对象")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("如下所示，该值可为任意类型，也可是一个Promise对象")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nPromise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"_3-6-promise-reject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-promise-reject"}},[t._v("#")]),t._v(" 3.6 Promise.reject()")]),t._v(" "),e("p",[e("code",[t._v("Promise.reject()")]),t._v("方法同上面"),e("code",[t._v("Promise.resolve()")]),t._v("一样，只不过是返回一个带有拒绝原因的"),e("code",[t._v("Promise")]),t._v("对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Promise.reject(123)\n  .then(data => {\n    console.log(data)\n  })\n  .catch(err => {\n    console.log("err:" + err)\n  })\n\n// err:123\n')])])]),e("h3",{attrs:{id:"_3-7-promise-all"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-promise-all"}},[t._v("#")]),t._v(" 3.7 Promise.all()")]),t._v(" "),e("p",[e("code",[t._v("Promise.all(iterable)")]),t._v("用于将多个Promise 实例包装成一个新的 Promise实例，参数为一组 Promise 实例组成的数组")]),t._v(" "),e("p",[t._v("iterable类型为ES6标准引入，代表可迭代对象，"),e("code",[t._v("Array")]),t._v("、"),e("code",[t._v("Map")]),t._v("和"),e("code",[t._v("Set")]),t._v("都属于"),e("code",[t._v("iterable")]),t._v("类型 ，iterable下面我们会讲到，这里我们就先把这个参数理解成数组就可以，稍后配合下面的iterable来理解")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("all")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("p3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\np"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1,2,3]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("如上所示，当 p1, p2, p3 状态都 Resolved 的时候，p 的状态才会 Resolved")]),t._v(" "),e("p",[t._v("只要有一个实例 Rejected ，此时第一个被 Rejected 的实例返回值就会传递给 P 的回调函数")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p1 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p2 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p3 "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("all")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\np"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"err:"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("应用场景在我们有一个接口，需要其他两个或多个接口返回的数据作为参数时会多一些")]),t._v(" "),e("h3",{attrs:{id:"_3-8-promise-race"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-promise-race"}},[t._v("#")]),t._v(" 3.8 Promise.race()")]),t._v(" "),e("p",[e("code",[t._v("Promise.race(iterable)")]),t._v("和上面"),e("code",[t._v("Promise.all(iterable)")]),t._v("类似")]),t._v(" "),e("p",[e("code",[t._v("all")]),t._v("方法是迭代对象中状态全部改变才会执行")]),t._v(" "),e("p",[e("code",[t._v("race")]),t._v("方法正好相反，只要迭代对象中有一个状态改变了，它的状态就跟着改变，并将那个改变状态实例的返回值传递给回调函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const p1 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 1000, "1")\n})\n\nconst p2 = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, "2")\n})\n\nPromise.race([p1, p2])\n  .then(value => {\n    console.log(value) // 2\n  })\n')])])]),e("h2",{attrs:{id:"_4-相关问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-相关问题"}},[t._v("#")]),t._v(" 4. 相关问题")]),t._v(" "),e("h3",{attrs:{id:"_4-1-onrejected和catch区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-onrejected和catch区别"}},[t._v("#")]),t._v(" 4.1 onRejected和catch区别")]),t._v(" "),e("p",[t._v("上面提到了"),e("code",[t._v("promise.then(onFulfilled, onRejected)")]),t._v("中的第二个参数onRejected和"),e("code",[t._v("catch")])]),t._v(" "),e("p",[t._v("看到这大家可能会问，同样都是捕获异常它们的区别在哪")]),t._v(" "),e("p",[t._v("其实"),e("code",[t._v("promise.then(onFulfilled, onRejected)")]),t._v(" 在 "),e("code",[t._v("onFulfilled")]),t._v("回调中发生异常的话，在"),e("code",[t._v("onRejected")]),t._v("中是捕获不到这个异常的，使用"),e("code",[t._v("catch")]),t._v("可以捕获到前面的onFulfilled的异常")]),t._v(" "),e("p",[t._v("其实这不算个缺点，我们完全可以在末尾多加一个"),e("code",[t._v("then")]),t._v("从而达到和"),e("code",[t._v("catch")]),t._v("相同的作用，如下")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("Promise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是对的"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"err:"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// err:1")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\n\nPromise"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我是对的"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"err:"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" err"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// err:1")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("就这么点区别，不过大部分人都喜欢直接使用"),e("code",[t._v("catch")]),t._v("罢了")]),t._v(" "),e("h3",{attrs:{id:"_4-2-then中抛错未处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-then中抛错未处理"}},[t._v("#")]),t._v(" 4.2 then中抛错未处理")]),t._v(" "),e("p",[t._v("如果在then中抛错，而没有对错误进行处理(catch)，那么会一直保持reject状态，直到catch了错误")]),t._v(" "),e("p",[t._v("我们来看一段代码")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Promise.resolve()\n\t.then(()=>{\n  \tconsole.log(a)\n  \tconsole.log("Task 1");\n\t})\n  .then(()=>{\n  \tconsole.log("Task 2");\n\t})\n  .catch((err)=>{\n  \tconsole.log("err:" + err)\n\t})\n  .then(()=>{\n  \tconsole.log("finaltask")\n\t});\n\n// err:ReferenceError: a is not defined\n// finaltask\n复制代码\n')])])]),e("p",[t._v("我们看上面代码，我们在第一个"),e("code",[t._v("then")]),t._v("中输出了一个未声明的变量")]),t._v(" "),e("p",[t._v("输出结果先走了"),e("code",[t._v("catch")]),t._v("然后走了最后一个"),e("code",[t._v("then")]),t._v("，第一个"),e("code",[t._v("then")]),t._v("中抛出错误并跳过了第二个"),e("code",[t._v("then")])]),t._v(" "),e("p",[t._v("也就是说如果我们没有处理这个错误(无catch)的话，就不会往下执行了")]),t._v(" "),e("p",[t._v("可参考下图")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210617194234349.png",alt:"image-20210617194234349"}})]),t._v(" "),e("p",[t._v("promise的缺点之一就是无法让promise中断，利用这个特性可以让Promise中断执行，也算一种办法吧")]),t._v(" "),e("h3",{attrs:{id:"_4-3-异步回调中抛错catch捕捉不到"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-异步回调中抛错catch捕捉不到"}},[t._v("#")]),t._v(" 4.3 异步回调中抛错catch捕捉不到")]),t._v(" "),e("p",[t._v("首先我们看在Promise对象的处理器函数中直接抛出错误")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const p = new Promise((resolve, reject)=>{\n  throw new Error('这是一个错误')\n});\np.catch((error)=>{ console.log(error) });\n复制代码\n")])])]),e("p",[t._v("按照上述内容来看，在Promise对象的处理器函数中直接抛出错误，"),e("code",[t._v("catch")]),t._v("是可以捕捉到的")]),t._v(" "),e("p",[t._v("在下面代码，在Promise对象的处理器函数中模拟一个异步抛错")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const p = new Promise((resolve, reject)=>{\n  setTimeout(()=>{ throw new Error('这是一个错误') }, 0)\n});\np.catch((error)=>{ console.log(error) });\n复制代码\n")])])]),e("p",[t._v("这种情况"),e("code",[t._v("catch")]),t._v("是捕捉不到的，这是为什么呢？先想后看，再做不难")]),t._v(" "),e("p",[e("strong",[t._v("原因")])]),t._v(" "),e("p",[t._v("JS 事件循环列表有宏任务与微任务之分，setTimeOut是宏任务， promise是微任务，执行顺序不同")]),t._v(" "),e("p",[t._v("那么这段代码的执行顺序是：")]),t._v(" "),e("ol",[e("li",[t._v("代码执行栈进入promise 触发setTimeOut，setTimeOut回调函数入宏任务队列")]),t._v(" "),e("li",[t._v("代码执行promise的catch方法，入微任务队列，此时setTimeOut回调还没有执行")]),t._v(" "),e("li",[t._v("执行栈检查发现当前微任务队列执行完毕，开始执行宏任务队列")]),t._v(" "),e("li",[t._v("执行"),e("code",[t._v("throw new Error('这是一个错误')")]),t._v(" 此时这个异常其实是在promise外部抛出的")])]),t._v(" "),e("p",[e("strong",[t._v("解决")])]),t._v(" "),e("p",[t._v("使用"),e("code",[t._v("try catch")]),t._v("捕获异常主动触发"),e("code",[t._v("reject")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const p = new Promise((resolve, reject)=>{\n  setTimeout(()=>{ \n    try{\n       throw new Error('这是一个错误') \n    }catch(e){\n       reject(e)\n    }\n }, 0)\n});\np.catch((error)=>{ console.log(error) });\n")])])]),e("h2",{attrs:{id:"_5-promise优-缺"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-promise优-缺"}},[t._v("#")]),t._v(" 5. Promise优/缺")]),t._v(" "),e("h3",{attrs:{id:"_5-1-优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-优点"}},[t._v("#")]),t._v(" 5.1 "),e("strong",[t._v("优点")])]),t._v(" "),e("p",[t._v("Promise用同步的方式写异步的代码，避免了层层嵌套的回调函数")]),t._v(" "),e("p",[t._v("Promise对象提供了统一的接口，使得控制异步操作更加容易")]),t._v(" "),e("p",[t._v("链式操作，可以在then中继续写Promise对象并返回，然后继续调用then来进行回调操作")]),t._v(" "),e("h3",{attrs:{id:"_5-2-缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-缺点"}},[t._v("#")]),t._v(" 5.2 "),e("strong",[t._v("缺点")])]),t._v(" "),e("p",[t._v("Promise对象一旦新建就会立即执行，无法中途取消")]),t._v(" "),e("p",[t._v("若不设置回调函数，Promise内部会抛出错误，不会流到外部")]),t._v(" "),e("p",[t._v("当处于pending状态时，无法得知当前处于哪一阶段")]),t._v(" "),e("p",[t._v("用多了Promise后代码一眼看上去都是promise的API，而且链式语法总觉得不好看，不优雅")]),t._v(" "),e("h2",{attrs:{id:"参考文章"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/6844904064614924302#heading-10",target:"_blank",rel:"noopener noreferrer"}},[t._v("「硬核JS」深入了解异步解决方案"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);