(window.webpackJsonp=window.webpackJsonp||[]).push([[846],{1222:function(s,t,a){"use strict";a.r(t);var n=a(26),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"redis面试-数据类型和数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis面试-数据类型和数据结构"}},[s._v("#")]),s._v(" Redis面试-数据类型和数据结构")]),s._v(" "),a("h2",{attrs:{id:"_1-redis-有哪些数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis-有哪些数据类型"}},[s._v("#")]),s._v(" 1 Redis 有哪些数据类型？")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("5种基础数据类型")]),s._v("，分别是：String、List、Set、Zset、Hash。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220628220310533.png",alt:"image-20220628220310533"}})]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("结构类型")]),s._v(" "),a("th",[s._v("结构存储的值")]),s._v(" "),a("th",[s._v("结构的读写能力")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[s._v("String字符串")])]),s._v(" "),a("td",[s._v("可以是字符串、整数或浮点数")]),s._v(" "),a("td",[s._v("对整个字符串或字符串的一部分进行操作；对整数或浮点数进行自增或自减操作；")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("List列表")])]),s._v(" "),a("td",[s._v("一个链表，链表上的每个节点都包含一个字符串")]),s._v(" "),a("td",[s._v("对链表的两端进行push和pop操作，读取单个或多个元素；根据值查找或删除元素；")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("Set集合")])]),s._v(" "),a("td",[s._v("包含字符串的无序集合")]),s._v(" "),a("td",[s._v("字符串的集合，包含基础的方法有看是否存在添加、获取、删除；还包含计算交集、并集、差集等")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("Hash散列")])]),s._v(" "),a("td",[s._v("包含键值对的无序散列表")]),s._v(" "),a("td",[s._v("包含方法有添加、获取、删除单个元素")])]),s._v(" "),a("tr",[a("td",[a("strong",[s._v("Zset有序集合")])]),s._v(" "),a("td",[s._v("和散列一样，用于存储键值对")]),s._v(" "),a("td",[s._v("字符串成员与浮点数分数之间的有序映射；元素的排列顺序由分数的大小决定；包含方法有添加、获取、删除单个元素以及根据分值范围或成员来获取元素")])])])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("三种特殊的数据类型")]),s._v(" 分别是 HyperLogLogs（基数统计）， Bitmaps (位图) 和 geospatial （地理位置)")])]),s._v(" "),a("h2",{attrs:{id:"_2-谈谈redis-的对象机制-redisobject"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-谈谈redis-的对象机制-redisobject"}},[s._v("#")]),s._v(" 2 谈谈Redis 的对象机制（redisObject)？")]),s._v(" "),a("p",[s._v("比如说， 集合类型就可以由字典和整数集合两种不同的数据结构实现， 但是， 当用户执行 ZADD 命令时， 他/她应该不必关心集合使用的是什么编码， 只要 Redis 能按照 ZADD 命令的指示， 将新元素添加到集合就可以了。")]),s._v(" "),a("p",[s._v("这说明, "),a("strong",[s._v("操作数据类型的命令除了要对键的类型进行检查之外, 还需要根据数据类型的不同编码进行多态处理")]),s._v(".")]),s._v(" "),a("p",[s._v("为了解决以上问题, "),a("strong",[s._v("Redis 构建了自己的类型系统")]),s._v(", 这个系统的主要功能包括:")]),s._v(" "),a("ul",[a("li",[s._v("redisObject 对象.")]),s._v(" "),a("li",[s._v("基于 redisObject 对象的类型检查.")]),s._v(" "),a("li",[s._v("基于 redisObject 对象的显式多态函数.")]),s._v(" "),a("li",[s._v("对 redisObject 进行分配、共享和销毁的机制.")])]),s._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n * Redis 对象\n */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("redisObject")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 类型")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" type"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编码方式")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" encoding"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// LRU - 24位, 记录最末一次访问时间（相对于lru_clock）; 或者 LFU（最少使用的数据：8位频率，16位访问时间）")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" lru"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("LRU_BITS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// LRU_BITS: 24")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 引用计数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" refcount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 指向底层数据结构实例")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("ptr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" robj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("下图对应上面的结构")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220628220842046.png",alt:"image-20220628220842046"}})]),s._v(" "),a("h2",{attrs:{id:"_3-redis-数据类型有哪些底层数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis-数据类型有哪些底层数据结构"}},[s._v("#")]),s._v(" 3 Redis 数据类型有哪些底层数据结构？")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220628220915518.png",alt:"image-20220628220915518"}})]),s._v(" "),a("ul",[a("li",[s._v("简单动态字符串 - sds")]),s._v(" "),a("li",[s._v("压缩列表 - ZipList")]),s._v(" "),a("li",[s._v("快表 - QuickList")]),s._v(" "),a("li",[s._v("字典/哈希表 - Dict")]),s._v(" "),a("li",[s._v("整数集 - IntSet")]),s._v(" "),a("li",[s._v("跳表 - ZSkipList")])]),s._v(" "),a("h2",{attrs:{id:"_4-为什么要设计sds"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-为什么要设计sds"}},[s._v("#")]),s._v(" 4 为什么要设计sds？")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("常数复杂度获取字符串长度")])])]),s._v(" "),a("p",[s._v("由于 len 属性的存在，我们获取 SDS 字符串的长度只需要读取 len 属性，时间复杂度为 O(1)。而对于 C 语言，获取字符串的长度通常是经过遍历计数来实现的，时间复杂度为 O(n)。通过 "),a("code",[s._v("strlen key")]),s._v(" 命令可以获取 key 的字符串长度。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("杜绝缓冲区溢出")])])]),s._v(" "),a("p",[s._v("我们知道在 C 语言中使用 "),a("code",[s._v("strcat")]),s._v("  函数来进行两个字符串的拼接，一旦没有分配足够长度的内存空间，就会造成缓冲区溢出。而对于 SDS 数据类型，在进行字符修改的时候，"),a("strong",[s._v("会首先根据记录的 len 属性检查内存空间是否满足需求")]),s._v("，如果不满足，会进行相应的空间扩展，然后在进行修改操作，所以不会出现缓冲区溢出。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("减少修改字符串的内存重新分配次数")])])]),s._v(" "),a("p",[s._v("C语言由于不记录字符串的长度，所以如果要修改字符串，必须要重新分配内存（先释放再申请），因为如果没有重新分配，字符串长度增大时会造成内存缓冲区溢出，字符串长度减小时会造成内存泄露。")]),s._v(" "),a("p",[s._v("而对于SDS，由于"),a("code",[s._v("len")]),s._v("属性和"),a("code",[s._v("alloc")]),s._v("属性的存在，对于修改字符串SDS实现了"),a("strong",[s._v("空间预分配")]),s._v("和"),a("strong",[s._v("惰性空间释放")]),s._v("两种策略：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("空间预分配")]),s._v("：对字符串进行空间扩展的时候，扩展的内存比实际需要的多，这样可以减少连续执行字符串增长操作所需的内存重分配次数。")]),s._v(" "),a("li",[a("strong",[s._v("惰性空间释放")]),s._v("：对字符串进行缩短操作时，程序不立即使用内存重新分配来回收缩短后多余的字节，而是使用 "),a("code",[s._v("alloc")]),s._v(" 属性将这些字节的数量记录下来，等待后续使用。（当然SDS也提供了相应的API，当我们有需要时，也可以手动释放这些未使用的空间。）")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("二进制安全")])])]),s._v(" "),a("p",[s._v("因为C字符串以空字符作为字符串结束的标识，而对于一些二进制文件（如图片等），内容可能包括空字符串，因此C字符串无法正确存取；而所有 SDS 的API 都是以处理二进制的方式来处理 "),a("code",[s._v("buf")]),s._v(" 里面的元素，并且 SDS 不是以空字符串来判断是否结束，而是以 len 属性表示的长度来判断字符串是否结束。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("兼容部分 C 字符串函数")])])]),s._v(" "),a("p",[s._v("虽然 SDS 是二进制安全的，但是一样遵从每个字符串都是以空字符串结尾的惯例，这样可以重用 C 语言库"),a("code",[s._v("<string.h>")]),s._v(" 中的一部分函数。")]),s._v(" "),a("h2",{attrs:{id:"_5-redis-一个字符串类型的值能存储最大容量是多少"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-redis-一个字符串类型的值能存储最大容量是多少"}},[s._v("#")]),s._v(" 5 Redis 一个字符串类型的值能存储最大容量是多少？")]),s._v(" "),a("p",[s._v("512M")]),s._v(" "),a("h2",{attrs:{id:"_6-为什么会设计stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-为什么会设计stream"}},[s._v("#")]),s._v(" 6 为什么会设计Stream？")]),s._v(" "),a("p",[s._v("用过Redis做消息队列的都了解，基于Reids的消息队列实现有很多种，例如：")]),s._v(" "),a("ul",[a("li",[s._v("PUB/SUB，订阅/发布模式\n"),a("ul",[a("li",[s._v("但是发布订阅模式是无法持久化的，如果出现网络断开、Redis 宕机等，消息就会被丢弃；")])])]),s._v(" "),a("li",[s._v("基于List LPUSH+BRPOP 或者 基于Sorted-Set 的实现\n"),a("ul",[a("li",[s._v("支持了持久化，但是不支持多播，分组消费等")])])])]),s._v(" "),a("p",[a("strong",[s._v("消费组消费图")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220628221135429.png",alt:"image-20220628221135429"}})]),s._v(" "),a("h2",{attrs:{id:"_7-redis-stream用在什么样场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-redis-stream用在什么样场景"}},[s._v("#")]),s._v(" 7 Redis Stream用在什么样场景？")]),s._v(" "),a("p",[s._v("可用作时通信等，大数据分析，异地数据备份等")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220628221236545.png",alt:"image-20220628221236545"}})]),s._v(" "),a("p",[s._v("客户端可以平滑扩展，提高处理能力")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/image-20220628221321712.png",alt:"image-20220628221321712"}})]),s._v(" "),a("h2",{attrs:{id:"_8-redis-stream消息id的设计是否考虑了时间回拨的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-redis-stream消息id的设计是否考虑了时间回拨的问题"}},[s._v("#")]),s._v(" 8 Redis Stream消息ID的设计是否考虑了时间回拨的问题？")]),s._v(" "),a("p",[s._v("XADD生成的1553439850328-0，就是Redis生成的消息ID，由两部分组成:"),a("strong",[s._v("时间戳-序号")]),s._v("。时间戳是毫秒级单位，是生成消息的Redis服务器时间，它是个64位整型（int64）。序号是在这个毫秒时间点内的消息序号，它也是个64位整型。")]),s._v(" "),a("p",[s._v("可以通过multi批处理，来验证序号的递增：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" MULTI\nOK\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XADD memberMessage * msg one\nQUEUED\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XADD memberMessage * msg two\nQUEUED\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XADD memberMessage * msg three\nQUEUED\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XADD memberMessage * msg four\nQUEUED\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XADD memberMessage * msg five\nQUEUED\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" EXEC\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553441006884-0"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553441006884-1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553441006884-2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553441006884-3"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553441006884-4"')]),s._v("\n")])])]),a("p",[s._v("由于一个redis命令的执行很快，所以可以看到在同一时间戳内，是通过序号递增来表示消息的。")]),s._v(" "),a("p",[s._v("为了保证消息是有序的，因此Redis生成的ID是单调递增有序的。由于ID中包含时间戳部分，为了避免服务器时间错误而带来的问题（例如服务器时间延后了），Redis的每个Stream类型数据都维护一个latest_generated_id属性，用于记录最后一个消息的ID。"),a("strong",[s._v("若发现当前时间戳退后（小于latest_generated_id所记录的），则采用时间戳不变而序号递增的方案来作为新消息ID")]),s._v("（这也是序号为什么使用int64的原因，保证有足够多的的序号），从而保证ID的单调递增性质。")]),s._v(" "),a("p",[s._v("强烈建议使用Redis的方案生成消息ID，因为这种时间戳+序号的单调递增的ID方案，几乎可以满足你全部的需求。但同时，记住ID是支持自定义的，别忘了！")]),s._v(" "),a("h2",{attrs:{id:"_9-redis-stream消费者崩溃带来的会不会消息丢失问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-redis-stream消费者崩溃带来的会不会消息丢失问题"}},[s._v("#")]),s._v(" 9 Redis Stream消费者崩溃带来的会不会消息丢失问题?")]),s._v(" "),a("p",[s._v("为了解决组内消息读取但处理期间消费者崩溃带来的消息丢失问题，STREAM 设计了 Pending 列表，用于记录读取但并未处理完毕的消息。命令XPENDIING 用来获消费组或消费内消费者的未处理完毕的消息。演示如下：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XPENDING mq mqGroup "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# mpGroup的Pending情况")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5个已读取但未处理的消息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553585533795-0"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 起始ID")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553585533795-4"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 结束ID")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"consumerA"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 消费者A有3个")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"consumerB"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 消费者B有1个")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"consumerC"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 消费者C有1个")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XPENDING mq mqGroup - + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 start end count 选项可以获取详细信息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553585533795-0"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 消息ID")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"consumerA"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 消费者")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1654355")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从读取到现在经历了1654355ms，IDLE")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 消息被读取了5次，delivery counter")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553585533795-1"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"consumerA"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1654355")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 共5个，余下3个省略 ...")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XPENDING mq mqGroup - + "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" consumerA "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在加上消费者参数，获取具体某个消费者的Pending列表")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553585533795-0"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"consumerA"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1641083")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 共3个，余下2个省略 ...")]),s._v("\n")])])]),a("p",[s._v("每个Pending的消息有4个属性：")]),s._v(" "),a("ul",[a("li",[s._v("消息ID")]),s._v(" "),a("li",[s._v("所属消费者")]),s._v(" "),a("li",[s._v("IDLE，已读取时长")]),s._v(" "),a("li",[s._v("delivery counter，消息被读取次数")])]),s._v(" "),a("p",[s._v("上面的结果我们可以看到，我们之前读取的消息，都被记录在Pending列表中，说明全部读到的消息都没有处理，仅仅是读取了。那如何表示消费者处理完毕了消息呢？使用命令 XACK 完成告知消息处理完成，演示如下：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XACK mq mqGroup "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1553585533795")]),s._v("-0 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 通知消息处理结束，用消息ID标识")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XPENDING mq mqGroup "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 再次查看Pending列表")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 已读取但未处理的消息已经变为4个")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553585533795-1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553585533795-4"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"consumerA"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 消费者A，还有2个消息处理")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"consumerB"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"consumerC"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v("\n\n")])])]),a("p",[s._v("有了这样一个Pending机制，就意味着在某个消费者读取消息但未处理后，消息是不会丢失的。等待消费者再次上线后，可以读取该Pending列表，就可以继续处理该消息了，保证消息的有序和不丢失。")]),s._v(" "),a("h2",{attrs:{id:"_10-redis-steam-坏消息问题-死信问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-redis-steam-坏消息问题-死信问题"}},[s._v("#")]),s._v(" 10 Redis Steam 坏消息问题，死信问题?")]),s._v(" "),a("p",[s._v("正如上面所说，如果某个消息，不能被消费者处理，也就是不能被XACK，这是要长时间处于Pending列表中，即使被反复的转移给各个消费者也是如此。此时该消息的delivery counter就会累加（上一节的例子可以看到），当累加到某个我们预设的临界值时，我们就认为是坏消息（也叫死信，DeadLetter，无法投递的消息），由于有了判定条件，我们将坏消息处理掉即可，删除即可。删除一个消息，使用XDEL语法，演示如下：")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除队列中的消息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XDEL mq "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1553585533795")]),s._v("-1\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看队列中再无此消息")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" XRANGE mq - +\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553585533795-0"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"msg"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1553585533795-2"')]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"msg"')]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3"')]),s._v("\n")])])]),a("p",[s._v("注意本例中，并没有删除Pending中的消息因此你查看Pending，消息还会在。可以执行XACK标识其处理完毕！")])])}),[],!1,null,null,null);t.default=e.exports}}]);