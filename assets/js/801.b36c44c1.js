(window.webpackJsonp=window.webpackJsonp||[]).push([[801],{1178:function(t,a,s){"use strict";s.r(a);var e=s(26),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"springsecurity核心组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springsecurity核心组件"}},[t._v("#")]),t._v(" SpringSecurity核心组件")]),t._v(" "),s("p",[t._v("spring security核心组件有：SecurityContext、SecurityContextHolder、Authentication、Userdetails 和 AuthenticationManager")]),t._v(" "),s("h2",{attrs:{id:"_1-securitycontext"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-securitycontext"}},[t._v("#")]),t._v(" 1. SecurityContext")]),t._v(" "),s("p",[t._v("安全上下文，用户通过Spring Security 的校验之后，验证信息存储在SecurityContext中，SecurityContext的接口定义如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecurityContext")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n\t * Obtains the currently authenticated principal, or an authentication request token.\n\t *\n\t * @return the <code>Authentication</code> or <code>null</code> if no authentication\n\t * information is available\n\t */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAuthentication")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n\t * Changes the currently authenticated principal, or removes the authentication\n\t * information.\n\t *\n\t * @param authentication the new <code>Authentication</code> token, or\n\t * <code>null</code> if no further authentication information should be stored\n\t */")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAuthentication")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" authentication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("可以看到"),s("code",[t._v("SecurityContext")]),t._v("接口只定义了两个方法，实际上其主要作用就是获取"),s("code",[t._v("Authentication")]),t._v("对象。")]),t._v(" "),s("h2",{attrs:{id:"_2-securitycontextholder"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-securitycontextholder"}},[t._v("#")]),t._v(" 2. SecurityContextHolder")]),t._v(" "),s("p",[t._v("SecurityContextHolder看名知义，是一个holder,用来hold住SecurityContext实例的。在典型的web应用程序中，用户登录一次，然后由其会话ID标识。服务器缓存持续时间会话的主体信息。在Spring Security中，在请求之间存储"),s("code",[t._v("SecurityContext")]),t._v("的责任落在"),s("code",[t._v("SecurityContextPersistenceFilter")]),t._v("上，默认情况下，该上下文将上下文存储为HTTP请求之间的"),s("code",[t._v("HttpSession")]),t._v("属性。它会为每个请求恢复上下文"),s("code",[t._v("SecurityContextHolder")]),t._v("，并且最重要的是，在请求完成时清除"),s("code",[t._v("SecurityContextHolder")]),t._v("。SecurityContextHolder是一个类，他的功能方法都是静态的（static）。")]),t._v(" "),s("p",[t._v("SecurityContextHolder可以设置指定JVM策略（SecurityContext的存储策略），这个策略有三种：")]),t._v(" "),s("ul",[s("li",[t._v("MODE_THREADLOCAL：SecurityContext 存储在线程中。")]),t._v(" "),s("li",[t._v("MODE_INHERITABLETHREADLOCAL：SecurityContext 存储在线程中，但子线程可以获取到父线程中的 SecurityContext。")]),t._v(" "),s("li",[t._v("MODE_GLOBAL：SecurityContext 在所有线程中都相同。")])]),t._v(" "),s("p",[t._v("SecurityContextHolder默认使用MODE_THREADLOCAL模式，即存储在当前线程中。在spring security应用中，我们通常能看到类似如下的代码：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecurityContextHolder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getContext")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAuthentication")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("token"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("strong",[t._v("其作用就是存储当前认证信息。")])]),t._v(" "),s("h2",{attrs:{id:"_3-authentication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-authentication"}},[t._v("#")]),t._v(" 3. Authentication")]),t._v(" "),s("p",[t._v("authentication 直译过来是“认证”的意思，在Spring Security 中Authentication用来表示当前用户是谁，一般来讲你可以理解为authentication就是一组用户名密码信息。Authentication也是一个接口，其定义如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Principal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GrantedAuthority")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAuthorities")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCredentials")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDetails")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrincipal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAuthenticated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAuthenticated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" isAuthenticated"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("接口有4个get方法，分别获取")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Authorities")]),t._v(", 填充的是用户角色信息。")]),t._v(" "),s("li",[s("code",[t._v("Credentials")]),t._v("，直译，证书。填充的是密码。")]),t._v(" "),s("li",[s("code",[t._v("Details")]),t._v(" ，用户信息。")]),t._v(" "),s("li",[t._v(","),s("code",[t._v("Principal")]),t._v(" 直译，形容词是“主要的，最重要的”，名词是“负责人，资本，本金”。感觉很别扭，所以，还是不翻译了，直接用原词principal来表示这个概念，其填充的是用户名。")])]),t._v(" "),s("p",[t._v("因此可以推断其实现类有这4个属性。这几个方法作用如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getAuthorities")]),t._v(": 获取用户权限，一般情况下获取到的是用户的角色信息。")]),t._v(" "),s("li",[s("code",[t._v("getCredentials")]),t._v(": 获取证明用户认证的信息，通常情况下获取到的是密码等信息。")]),t._v(" "),s("li",[s("code",[t._v("getDetails")]),t._v(": 获取用户的额外信息，（这部分信息可以是我们的用户表中的信息）")]),t._v(" "),s("li",[s("code",[t._v("getPrincipal")]),t._v(": 获取用户身份信息，在未认证的情况下获取到的是用户名，在已认证的情况下获取到的是 UserDetails (UserDetails也是一个接口，里边的方法有getUsername,getPassword等)。")]),t._v(" "),s("li",[s("code",[t._v("isAuthenticated")]),t._v(": 获取当前 Authentication 是否已认证。")]),t._v(" "),s("li",[s("code",[t._v("setAuthenticated")]),t._v(": 设置当前 Authentication 是否已认证（true or false）。")])]),t._v(" "),s("h2",{attrs:{id:"_4-userdetails"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-userdetails"}},[t._v("#")]),t._v(" 4. UserDetails")]),t._v(" "),s("p",[t._v("UserDetails，看命知义，是用户信息的意思。其存储的就是用户信息，其定义如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserDetails")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GrantedAuthority")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAuthorities")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPassword")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUsername")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAccountNonExpired")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAccountNonLocked")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isCredentialsNonExpired")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEnabled")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("方法含义如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("getAuthorites")]),t._v("：获取用户权限，本质上是用户的角色信息。")]),t._v(" "),s("li",[s("code",[t._v("getPassword")]),t._v(": 获取密码。")]),t._v(" "),s("li",[s("code",[t._v("getUserName")]),t._v(": 获取用户名。")]),t._v(" "),s("li",[s("code",[t._v("isAccountNonExpired")]),t._v(": 账户是否过期。")]),t._v(" "),s("li",[s("code",[t._v("isAccountNonLocked")]),t._v(": 账户是否被锁定。")]),t._v(" "),s("li",[s("code",[t._v("isCredentialsNonExpired")]),t._v(": 密码是否过期。")]),t._v(" "),s("li",[s("code",[t._v("isEnabled")]),t._v(": 账户是否可用。")])]),t._v(" "),s("h2",{attrs:{id:"_5-userdetailsservice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-userdetailsservice"}},[t._v("#")]),t._v(" 5. UserDetailsService")]),t._v(" "),s("p",[t._v("提到了"),s("code",[t._v("UserDetails")]),t._v("就必须得提到"),s("code",[t._v("UserDetailsService")]),t._v(", UserDetailsService也是一个接口，且只有一个方法"),s("code",[t._v("loadUserByUsername")]),t._v("，他可以用来获取UserDetails。")]),t._v(" "),s("p",[t._v("通常在spring security应用中，我们会自定义一个CustomUserDetailsService来实现UserDetailsService接口，并实现其"),s("code",[t._v("public UserDetails loadUserByUsername(final String login);")]),t._v("方法。我们在"),s("strong",[t._v("实现"),s("code",[t._v("loadUserByUsername")]),t._v("方法的时候，就可以通过查询数据库（或者是缓存、或者是其他的存储形式）来获取用户信息，然后组装成一个"),s("code",[t._v("UserDetails")]),t._v(",(通常是一个"),s("code",[t._v("org.springframework.security.core.userdetails.User")]),t._v("，它继承自UserDetails) 并返回。")])]),t._v(" "),s("p",[t._v("在实现"),s("code",[t._v("loadUserByUsername")]),t._v("方法的时候，如果我们通过查库没有查到相关记录，需要抛出一个异常来告诉spring security来“善后”。这个异常是"),s("code",[t._v("org.springframework.security.core.userdetails.UsernameNotFoundException")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"_6-authenticationmanager"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-authenticationmanager"}},[t._v("#")]),t._v(" 6. AuthenticationManager")]),t._v(" "),s("p",[t._v("AuthenticationManager 是一个接口，它只有一个方法，接收参数为"),s("code",[t._v("Authentication")]),t._v("，其定义如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthenticationManager")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("authenticate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Authentication")]),t._v(" authentication"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AuthenticationException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("AuthenticationManager 的作用就是校验"),s("code",[t._v("Authentication")]),t._v(",如果验证失败会抛出"),s("code",[t._v("AuthenticationException")]),t._v("异常。"),s("code",[t._v("AuthenticationException")]),t._v("是一个抽象类，因此代码逻辑并不能实例化一个AuthenticationException异常并抛出，实际上抛出的异常通常是其实现类，如"),s("code",[t._v("DisabledException")]),t._v(","),s("code",[t._v("LockedException")]),t._v(","),s("code",[t._v("BadCredentialsException")]),t._v("等。"),s("code",[t._v("BadCredentialsException")]),t._v("可能会比较常见，即密码错误的时候。")]),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/demingblog/p/10874753.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Security 入门原理及实战"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);