(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{509:function(t,s,a){"use strict";a.r(s);var n=a(26),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"cut切分命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cut切分命令"}},[t._v("#")]),t._v(" cut切分命令")]),t._v(" "),a("h2",{attrs:{id:"_1-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[t._v("#")]),t._v(" 1 简介")]),t._v(" "),a("p",[t._v("cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。")]),t._v(" "),a("blockquote",[a("p",[t._v("如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。")])]),t._v(" "),a("h2",{attrs:{id:"_2-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-语法"}},[t._v("#")]),t._v(" 2 语法")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-bn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 或 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  或  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-df"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"_3-参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-参数"}},[t._v("#")]),t._v(" 3 参数")]),t._v(" "),a("ul",[a("li",[t._v("**-b ：**以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。")]),t._v(" "),a("li",[t._v("**-c ：**以字符为单位进行分割。")]),t._v(" "),a("li",[t._v("**-d ：**自定义分隔符，默认为制表符。")]),t._v(" "),a("li",[t._v("**-f ：**与-d一起使用，指定显示哪个区域。")]),t._v(" "),a("li",[t._v("**-n ：**取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的"),a("br"),t._v("范围之内，该字符将被写出；否则，该字符将被排除。")])]),t._v(" "),a("h2",{attrs:{id:"_4-如何定位到剪切内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-如何定位到剪切内容"}},[t._v("#")]),t._v(" 4 如何定位到剪切内容")]),t._v(" "),a("p",[t._v("cut命令主要是接受三个定位方法：")]),t._v(" "),a("p",[t._v("第一，字节（bytes），用选项-b")]),t._v(" "),a("p",[t._v("第二，字符（characters），用选项-c")]),t._v(" "),a("p",[t._v("第三，域（fields），用选项-f")]),t._v(" "),a("h3",{attrs:{id:"_4-1-以-字节-为单位切分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-以-字节-为单位切分"}},[t._v("#")]),t._v(" 4.1 "),a("strong",[t._v("以“字节”为单位切分")])]),t._v(" "),a("p",[t._v("举个例子吧，当你执行who命令时，会输出类似如下的内容：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("who")]),t._v("\nroot     pts/2        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nroot     pts/3        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如果我们想提取每一行的第4个字节，就这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("who|cut -b 4\nt\nt\n")])])]),a("p",[a("strong",[t._v("如果“字节”定位中，我想提取第1，第2、第3和第10个字节，怎么办?")])]),t._v(" "),a("p",[t._v("-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了。看看例子吧：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("who")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -b "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("-3,10\nroop\nroop\n")])])]),a("p",[t._v("但有一点要注意，cut命令如果使用了-b选项，那么执行此命令时，cut会先把-b后面所有的定位进行从小到大排序，然后再提取。因此这跟我们书写的顺序没有关系。这个例子就可以说明这个问题：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("who|cut -b 10,1-3\nroop\nroop\n")])])]),a("h4",{attrs:{id:"_4-1-1-还有哪些类似-3-5-这样的小技巧-列举一下吧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-还有哪些类似-3-5-这样的小技巧-列举一下吧"}},[t._v("#")]),t._v(" 4.1.1　"),a("strong",[t._v("还有哪些类似“3-5”这样的小技巧，列举一下吧!")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# who|cut -b 3-")]),t._v("\not     pts/2        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\not     pts/3        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# who")]),t._v("\nroot     pts/2        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nroot     pts/3        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# who|cut -b -3")]),t._v("\nroo\nroo\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# who|cut -b 3-")]),t._v("\not     pts/2        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\not     pts/3        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("p",[t._v("想必你也看到了，-3表示从第一个字节到第三个字节，而3-表示从第三个字节到行尾。如果你细心，你可以看到这两种情况下，都包括了第三个字节“c”。如果我执行who|cut -b -3,3-，你觉得会如何呢？答案是输出整行，不会出现连续两个重叠的c的。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("who")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -b -3,3-\nroot     pts/2        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nroot     pts/3        "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2022")]),t._v("-04-24 "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(":17 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("223.104")]),t._v(".6.4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"_4-2-以-字符-为单位切分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-以-字符-为单位切分"}},[t._v("#")]),t._v(' 4.2 以"字符"为单位切分')]),t._v(" "),a("p",[t._v("下面例子你似曾相识，提取第1，第2，第3和第10个字符：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# who|cut -c 1-3,10")]),t._v("\nroop\nroop\n")])])]),a("p",[t._v("不过，看着怎么和-b没有什么区别啊？莫非-b和-c作用一样? 其实不然，看似相同，只是因为这个例子举的不好，who输出的都是单字节字符，所以用-b和-c没有区别，如果你提取中文，区别就看出来了，来，看看中文提取的情况：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[root@iZwz914d1peizv4h7laju4Z ~]# cat cut_ch.txt\n星期一\n星期二\n星期三\n星期四\n[root@iZwz914d1peizv4h7laju4Z ~]# cut -b 3 cut_ch.txt\n�\n�\n�\n�\n[root@iZwz914d1peizv4h7laju4Z ~]# cut -c 3 cut_ch.txt\n一\n二\n三\n四\n\n")])])]),a("p",[t._v("看到了吧，用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。既然提到了这个知识点，就再补充一句，如果你学有余力，就提高一下。当遇到多字节字符时，可以使用-n选项，-n用于告诉cut不要将多字节字符拆开。")]),t._v(" "),a("blockquote",[a("p",[t._v("跟文档不太一样")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" cut_ch.txt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cut")]),t._v(" -b "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n�\n�\n�\n�\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat cut_ch.txt |cut -nb 2")]),t._v("\n期\n期\n期\n期\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat cut_ch.txt |cut -nb 1,2,3")]),t._v("\n星期一\n星期二\n星期三\n星期四\n\n")])])]),a("h3",{attrs:{id:"_4-3-以-域-为单位切分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-以-域-为单位切分"}},[t._v("#")]),t._v(' 4.3 以"域"为单位切分')]),t._v(" "),a("p",[t._v("为什么会有“域”的提取呢，因为刚才提到的-b和-c只能在固定格式的文档中提取信息，而对于非固定格式的信息则束手无策。这时候“域”就派上用场了。如果你观察过/etc/passwd文件，你会发现，它并不像who的输出信息那样具有固定格式，而是比较零散的排放。但是，冒号在这个文件的每一行中都起到了非常重要的作用，冒号用来隔开每一个项。")]),t._v(" "),a("p",[t._v("我们很幸运，cut命令提供了这样的提取方式，具体的说就是设置“间隔符”，再设置“提取第几个域”，就OK了！")]),t._v(" "),a("p",[t._v("以/etc/passwd的前五行内容为例：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  cat /etc/passwd|head -n 5")]),t._v("\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat /etc/passwd|head -n 5|cut -d : -f 1")]),t._v("\nroot\nbin\ndaemon\nadm\nlp\n\n")])])]),a("p",[t._v("看到了吧，用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域，再按回车，所有的用户名就都列出来了！呵呵 有成就感吧！")]),t._v(" "),a("p",[t._v("当然，在设定-f时，也可以使用例如3-5或者4-类似的格式：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat /etc/passwd|head -n 5|cut -d : -f 1,3-5")]),t._v("\nroot:0:0:root\nbin:1:1:bin\ndaemon:2:2:daemon\nadm:3:4:adm\nlp:4:7:lp\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat /etc/passwd|head -n 5|cut -d : -f 1,3-5,7")]),t._v("\nroot:0:0:root:/bin/bash\nbin:1:1:bin:/sbin/nologin\ndaemon:2:2:daemon:/sbin/nologin\nadm:3:4:adm:/sbin/nologin\nlp:4:7:lp:/sbin/nologin\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@iZwz914d1peizv4h7laju4Z ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cat /etc/passwd|head -n 5|cut -d : -f -2")]),t._v("\nroot:x\nbin:x\ndaemon:x\nadm:x\nlp:x\n\n")])])]),a("h3",{attrs:{id:"_4-4-cut的弊端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-cut的弊端"}},[t._v("#")]),t._v(" 4.4 cut的弊端")]),t._v(" "),a("p",[a("strong",[t._v("如果遇到空格和制表符时，怎么分辨呢？我觉得有点乱，怎么办？")])]),t._v(" "),a("p",[t._v("有时候制表符确实很难辨认，有一个方法可以看出一段空格到底是由若干个空格组成的还是由一个制表符组成的。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("cat tab_space.txt\nthis is tab finish.\nthis is several space      finish.\n$ sed -n l tab_space.txt\nthis is tab\\tfinish.$\nthis is several space      finish.$\n")])])]),a("p",[t._v("看到了吧，如果是制表符（TAB），那么会显示为\\t符号，如果是空格，就会原样显示。通过此方法即可以判断制表符和空格了。注意，上面sed -n后面的字符是L的小写字母哦，不要看错。")]),t._v(" "),a("p",[a("strong",[t._v("我应该在cut -d中用什么符号来设定制表符或空格呢?")])]),t._v(" "),a("p",[t._v("其实cut的-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了。如果你设定一个空格为间隔符，那么就这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$cat tab_space.txt |cut -d ' ' -f 1\nthis\nthis\n")])])]),a("p",[t._v("注意，两个单引号之间可确实要有一个空格哦，不能偷懒。而且，你只能在-d后面设置一个空格，可不许设置多个空格，因为cut只允许间隔符是一个字符。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ cat tab_space.txt |cut -d ' ' -f 1\ncut: the delimiter must be a single character\nTry `cut --help' for more information.\n")])])]),a("p",[t._v("此外，cut在处理多空格的时候会更麻烦，因为"),a("strong",[t._v("cut只擅长处理“以一个字符间隔”的文本内容。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);