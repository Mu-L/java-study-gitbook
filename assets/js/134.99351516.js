(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{513:function(s,a,t){"use strict";t.r(a);var n=t(26),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"awk强大的文本分析命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#awk强大的文本分析命令"}},[s._v("#")]),s._v(" awk强大的文本分析命令")]),s._v(" "),t("h2",{attrs:{id:"_1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[s._v("#")]),s._v(" 1 简介")]),s._v(" "),t("p",[s._v("awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。")]),s._v(" "),t("h2",{attrs:{id:"_2-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-语法"}},[s._v("#")]),s._v(" 2 语法")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{pattern + action}'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("filenames"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。")]),s._v(" "),t("p",[s._v("awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。")]),s._v(" "),t("p",[s._v("通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。")]),s._v(" "),t("h2",{attrs:{id:"_3-awk入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-awk入门"}},[s._v("#")]),s._v(" 3 awk入门")]),s._v(" "),t("p",[s._v("假设last -n 5的输出如下：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  last -n 5 # 仅取出前五行")]),s._v("\nroot     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.18     Thu Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":22   still logged "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   \nroot     pts/2        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.18     Thu Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":22   still logged "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   \nroot     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.18     Thu Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":30 - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":13  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00:43"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    \nroot     pts/2        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.18     Thu Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":30 - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":13  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00:43"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    \nroot     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.12     Tue Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":35 - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":52  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00:17"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])])]),t("p",[s._v("如果只是显示最近登录的5个帐号：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# last -n 5 | awk  '{print $1}'")]),s._v("\nroot\nroot\nroot\nroot\nroot\n")])])]),t("p",[s._v('awk工作流程是这样的：读入有\'\\n\'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，0则表示所有域,0则表示所有域,1表示第一个域,𝑛表示第𝑛个域。默认域分隔符是"空白键"或"[𝑡𝑎𝑏]键",所以n表示第n个域。默认域分隔符是"空白键"或"[tab]键",所以1表示登录用户，$3表示登录用户ip,以此类推。')]),s._v(" "),t("p",[s._v("如果只是显示/etc/passwd的账户：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/passwd |awk  -F ':'  '{print $1}'  ")]),s._v("\nroot\nbin\ndaemon\nadm\nlp\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sync")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("halt")]),s._v("\nmail\n")])])]),t("p",[s._v("这种是awk+action的示例，每行都会执行action{print $1}。")]),s._v(" "),t("p",[t("strong",[s._v("-F指定域分隔符为':'。")])]),s._v(" "),t("p",[s._v("如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/passwd |awk  -F ':'  '{print $1\"\\t\"$7}'")]),s._v("\nroot    /bin/bash\nbin     /sbin/nologin\ndaemon  /sbin/nologin\nadm     /sbin/nologin\n\n")])])]),t("p",[s._v('如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加"blue,/bin/nosh"：')]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# cat /etc/passwd |awk  -F \':\'  \'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}\'')]),s._v("\nname,shell\nroot,/bin/bash\nbin,/sbin/nologin\ndaemon,/sbin/nologin\nadm,/sbin/nologin\nlp,/sbin/nologin\nsync,/bin/sync\n\n")])])]),t("p",[s._v("awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，0则表示所有域,0则表示所有域,1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。")]),s._v(" "),t("p",[s._v("搜索/etc/passwd有root关键字的所有行：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# awk -F: '/root/{print $7}' /etc/passwd   ")]),s._v("\n/bin/bash\n/sbin/nologin\n\n")])])]),t("p",[s._v("这里指定了action{print $7}。")]),s._v(" "),t("h2",{attrs:{id:"_4-awk-进阶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-awk-进阶"}},[s._v("#")]),s._v(" 4 awk 进阶")]),s._v(" "),t("h3",{attrs:{id:"_4-1-内置变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-内置变量"}},[s._v("#")]),s._v(" 4.1 内置变量")]),s._v(" "),t("p",[s._v("awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("ARGC               命令行参数个数\nARGV               命令行参数排列\nENVIRON            支持队列中系统环境变量的使用\nFILENAME           awk浏览的文件名\nFNR                浏览文件的记录数\nFS                 设置输入域分隔符，等价于命令行 -F选项\nNF                 浏览记录的域的个数\nNR                 已读的记录数\nOFS                输出域分隔符\nORS                输出记录分隔符\nRS                 控制记录分隔符\n")])])]),t("p",[s._v("此外,0变量是指整条记录。0变量是指整条记录。1表示当前行的第一个域,$2表示当前行的第二个域,......以此类推。")]),s._v(" "),t("p",[s._v("统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# awk  -F \':\'  \'{print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0}\' /etc/passwd')]),s._v("\nfilename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash\nfilename:/etc/passwd,linenumber:2,columns:7,linecontent:bin:x:1:1:bin:/bin:/sbin/nologin\nfilename:/etc/passwd,linenumber:3,columns:7,linecontent:daemon:x:2:2:daemon:/sbin:/sbin/nologin\nfilename:/etc/passwd,linenumber:4,columns:7,linecontent:adm:x:3:4:adm:/var/adm:/sbin/nologin\nfilename:/etc/passwd,linenumber:5,columns:7,linecontent:lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nfilename:/etc/passwd,linenumber:6,columns:7,linecontent:sync:x:5:0:sync:/sbin:/bin/sync\n\n")])])]),t("h3",{attrs:{id:"_4-2-变量和赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-变量和赋值"}},[s._v("#")]),s._v(" 4.2 变量和赋值")]),s._v(" "),t("p",[s._v("除了awk的内置变量，awk还可以自定义变量。")]),s._v(" "),t("p",[s._v("下面统计/etc/passwd的账户人数：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{count++;print "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v(';} END{print "user count is ", count}\'')]),s._v(" /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nuser count is  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v("\n")])])]),t("p",[s._v("count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。")]),s._v(" "),t("p",[s._v("这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'BEGIN {count=0;print "[start]user count is ", count} {count=count+1;print '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v(';} END{print "[end]user count is ", count}\'')]),s._v(" /etc/passwd\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("start"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("user count is  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nroot:x:0:0:root:/root:/bin/bash\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nnexus:x:1001:1001::/home/nexus:/bin/bash\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("end"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("user count is  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v("\n")])])]),t("h3",{attrs:{id:"_4-3-条件语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-条件语句"}},[s._v("#")]),s._v(" 4.3 条件语句")]),s._v(" "),t("p",[s._v("awk中的条件语句是从C语言中借鉴来的，用法与C语言一致。")]),s._v(" "),t("p",[s._v("统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#ls -l |awk \'BEGIN {size=0;print "[start]size is ", size} {if($5!=4096){size=size+$5;}} END{print "[end]size is ", size/1024/1024,"M"}\' ')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("end"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("size is  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.22339")]),s._v(" M\n")])])]),t("h3",{attrs:{id:"_4-4-循环语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-循环语句"}},[s._v("#")]),s._v(" 4.4 循环语句")]),s._v(" "),t("p",[s._v("awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。")]),s._v(" "),t("h3",{attrs:{id:"_4-5-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-数组"}},[s._v("#")]),s._v(" 4.5 数组")]),s._v(" "),t("p",[s._v("因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。")]),s._v(" "),t("p",[s._v("显示/etc/passwd的账户：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#awk -F ':' 'BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i < NR; i++) print i, name[i]}' /etc/passwd")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" root\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" daemon\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" bin\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" sys\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sync")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" games\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n")])])]),t("p",[s._v("这里使用for循环遍历数组。")])])}),[],!1,null,null,null);a.default=e.exports}}]);