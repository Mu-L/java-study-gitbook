(window.webpackJsonp=window.webpackJsonp||[]).push([[414],{795:function(t,s,a){"use strict";a.r(s);var e=a(26),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"导入springboot源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#导入springboot源码"}},[t._v("#")]),t._v(" 导入SpringBoot源码")]),t._v(" "),a("h2",{attrs:{id:"_1-导入源码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-导入源码"}},[t._v("#")]),t._v(" 1. 导入源码")]),t._v(" "),a("blockquote",[a("p",[t._v("我们项目中的springboot 版本为2.1.0.RELEASE，所以我们就以2.1.0.RELEASE为学习标准")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("源码地址")]),t._v(" "),a("p",[t._v("https://github.com/spring-projects/spring-boot/tree/v2.1.0.RELEASE")])]),t._v(" "),a("li",[a("p",[t._v("fork到自己github仓库")]),t._v(" "),a("p",[t._v("fork 到自己仓库，可以方便的写一些注释帮助我们阅读理解源码")])]),t._v(" "),a("li",[a("p",[t._v("建个分支来学习")]),t._v(" "),a("p",[t._v("分支的基础版本为：2.1.0.RELEASE")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308192302601.png",alt:"image-20220308192302601"}})])])]),t._v(" "),a("h2",{attrs:{id:"_2-将springboot源码项目导入到idea中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-将springboot源码项目导入到idea中"}},[t._v("#")]),t._v(" 2. 将SpringBoot源码项目导入到IDEA中")]),t._v(" "),a("p",[t._v("导入后的结果")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308190307742.png",alt:"image-20220308190307742"}})]),t._v(" "),a("h2",{attrs:{id:"_3-编译构建springboot源码项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-编译构建springboot源码项目"}},[t._v("#")]),t._v(" 3. 编译构建SpringBoot源码项目")]),t._v(" "),a("h3",{attrs:{id:"_3-1-前置配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-前置配置"}},[t._v("#")]),t._v(" 3.1 前置配置")]),t._v(" "),a("p",[t._v("此时导入项目后，我们进行编译构建SpringBoot源码项目了，在构建之前做两个配置：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("我们要禁用maven的代码检查，在根pom.xml中增加一下配置即可，如下图：")]),t._v(" "),a("div",{staticClass:"language-\x3c!--设置disable.checks为true--\x3e\t\t<disable.checks>true</disable.checks> extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\x3c!--设置disable.checks为true--\x3e\n<disable.checks>true</disable.checks>\n")])])])])]),t._v(" "),a("p",[t._v("​\t"),a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308190609199.png",alt:"image-20220308190609199"}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("可能有的小伙伴们的pom.xml文件的project标签上显示"),a("code",[t._v("java.lang.OutOfMemoryError")]),t._v("错误，这是因为IDEA里的Maven的importer设置的JVM最大堆内存过小而导致的，如下图,此时可参考"),a("a",{attrs:{href:"https://blog.csdn.net/w605283073/article/details/85107497",target:"_blank",rel:"noopener noreferrer"}},[t._v("Maven依赖包导入错误（IntelliJ IDEA）"),a("OutboundLink")],1),t._v("解决即可。")])]),t._v(" "),a("p",[t._v("​\t"),a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308190638212.png",alt:"image-20220308190638212"}})]),t._v(" "),a("h3",{attrs:{id:"_3-2-命令编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-命令编译"}},[t._v("#")]),t._v(" 3.2 命令编译")]),t._v(" "),a("p",[t._v("进行了上面的两点配置后，此时我们就可以直接执行以下maven命令来编译构建源码项目了。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("mvn clean install "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("DskipTests "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Pfast\n")])])]),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308190825164.png",alt:"image-20220308190825164"}})]),t._v(" "),a("p",[t._v("此时又是漫长的等待构建成功了，如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308195059235.png",alt:"image-20220308195059235"}})]),t._v(" "),a("h2",{attrs:{id:"_4-运行springboot自带的sample"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-运行springboot自带的sample"}},[t._v("#")]),t._v(" 4. 运行SpringBoot自带的sample")]),t._v(" "),a("p",[t._v("因为SpringBoot源码中的spring-boot-samples模块自带了很多DEMO样例，我们可以利用其中的一个sample来测试运行刚刚构建的springboot源码项目即可。但此时发现spring-boot-samples模块是灰色的，如下图")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308195141434.png",alt:"image-20220308195141434"}})]),t._v(" "),a("p",[t._v("这是因为spring-boot-samples模块没有被添加到根pom.xml中，此时将其添加到根pom.xml中即可，增加如下配置，如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308195320473.png",alt:"image-20220308195320473"}})]),t._v(" "),a("p",[t._v("此时我们挑选spring-boot-samples模块下的spring-boot-sample-tomcat样例项目来测试好了，此时启动"),a("code",[t._v("SampleTomcatApplication")]),t._v("的"),a("code",[t._v("main")]),t._v("函数，启动成功界面如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308202332052.png",alt:"image-20220308202332052"}})]),t._v(" "),a("p",[t._v("然后我们再在浏览器发送一个HTTP请求，此时可以看到服务端成功返回响应，说明此时SpringBoot源码环境就已经构建成功了，接下来我们就可以进行调试了，如下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20220308202423116.png",alt:"image-20220308202423116"}})]),t._v(" "),a("h2",{attrs:{id:"参考文章"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1595465",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何搭建自己的SpringBoot源码调试环境？--SpringBoot源码（一）"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/w605283073/article/details/85106902",target:"_blank",rel:"noopener noreferrer"}},[t._v("搭建SpringBoot源码环境的正确姿势（避坑必备）"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);