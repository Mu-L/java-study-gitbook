(window.webpackJsonp=window.webpackJsonp||[]).push([[596],{971:function(t,a,_){"use strict";_.r(a);var s=_(26),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"js异步解决方案简介-一"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#js异步解决方案简介-一"}},[t._v("#")]),t._v(" Js异步解决方案简介(一)")]),t._v(" "),_("h2",{attrs:{id:"_1-背景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-背景"}},[t._v("#")]),t._v(" 1. 背景")]),t._v(" "),_("p",[t._v("Javascript语言的执行环境是"),_("code",[t._v("单线程")]),t._v("(single thread，指一次只能完成一件任务，如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推)")]),t._v(" "),_("h3",{attrs:{id:"_1-1-单线程优劣势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-单线程优劣势"}},[t._v("#")]),t._v(" 1.1 单线程优劣势")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("优势：")]),t._v(" "),_("p",[t._v("实现起来比较简单，执行环境相对单纯")])]),t._v(" "),_("li",[_("p",[t._v("劣势")]),t._v(" "),_("p",[t._v("只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行，常见的浏览器无响应(假死)，往往就是因为某一段Javascript代码长时间运行(比如死循环)，导致整个页面卡在这个地方，其他任务无法执行")])])]),t._v(" "),_("h2",{attrs:{id:"_2-js任务的执行模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-js任务的执行模式"}},[t._v("#")]),t._v(" 2. JS任务的执行模式")]),t._v(" "),_("p",[t._v("针对js单线程模式，Javascript将任务的执行模式分成两种：同步(Synchronous)和异步(Asynchronous)")]),t._v(" "),_("h3",{attrs:{id:"_2-1-同步模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-同步模式"}},[t._v("#")]),t._v(" 2.1 同步模式")]),t._v(" "),_("p",[_("code",[t._v("同步模式")]),t._v(" 就是后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的")]),t._v(" "),_("h3",{attrs:{id:"_2-2-异步模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-异步模式"}},[t._v("#")]),t._v(" 2.2 异步模式")]),t._v(" "),_("p",[_("code",[t._v("异步模式")]),t._v("则完全不同，每一个任务有一个或多个回调函数(callback)，前一个任务结束后，"),_("strong",[t._v("不是执行后一个任务，而是执行回调函数")]),t._v("，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的，在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，"),_("code",[t._v("异步模式")]),t._v("甚至是唯一的模式，因为执行环境是单线程的，如果允许同步执行所有http请求，服务器性能会急剧下降")]),t._v(" "),_("h2",{attrs:{id:"_3-异步解决方案"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-异步解决方案"}},[t._v("#")]),t._v(" 3.异步解决方案")]),t._v(" "),_("ul",[_("li",[t._v("回调函数(callback)")]),t._v(" "),_("li",[t._v("事件监听(发布/订阅)解析")]),t._v(" "),_("li",[t._v("Promise解析及从0～1的源码体验")]),t._v(" "),_("li",[t._v("Generator全面解析")]),t._v(" "),_("li",[t._v("Async/Await解析")])]),t._v(" "),_("h2",{attrs:{id:"参考文章"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://juejin.cn/post/6844904064614924302#heading-65",target:"_blank",rel:"noopener noreferrer"}},[t._v("「硬核JS」深入了解异步解决方案"),_("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);