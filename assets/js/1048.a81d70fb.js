(window.webpackJsonp=window.webpackJsonp||[]).push([[1048],{1425:function(t,a,s){"use strict";s.r(a);var e=s(26),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"atomic原子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#atomic原子类"}},[t._v("#")]),t._v(" Atomic原子类")]),t._v(" "),s("h2",{attrs:{id:"_1-简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[t._v("#")]),t._v(" 1. 简介")]),t._v(" "),s("p",[t._v("Java从JDK1.5开始提供了java.util.concurrent.atomic包，"),s("strong",[t._v("atomic包中的类用于在多线程环境下实现单个变量多个独立操作（比如读-写）的连续原子性。")])]),t._v(" "),s("p",[t._v("并且都比较高效，因为它们都是由基于偏移量（类似于指针）的"),s("strong",[t._v("非阻塞CAS算法实现，用于替代锁的使用。")])]),t._v(" "),s("blockquote",[s("p",[t._v("无锁的进行原子操作，用于替代锁的使用")]),t._v(" "),s("p",[t._v("原理："),s("strong",[t._v("volatile字段修饰符+CAS算法（Unsafe提供）")])])]),t._v(" "),s("h2",{attrs:{id:"_2-juc包中的4类原子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-juc包中的4类原子类"}},[t._v("#")]),t._v(" 2. JUC包中的4类原子类")]),t._v(" "),s("p",[t._v("并发包 "),s("code",[t._v("java.util.concurrent")]),t._v(" 的原子类都存放在"),s("code",[t._v("java.util.concurrent.atomic")]),t._v("下,如下图所示。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/img/image-20190917225827634.png",alt:"image-20190917225827634"}})]),t._v(" "),s("h3",{attrs:{id:"_2-1-基本类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-基本类型"}},[t._v("#")]),t._v(" "),s("strong",[t._v("2.1 基本类型")])]),t._v(" "),s("p",[t._v("使用原子的方式更新基本类型")]),t._v(" "),s("ul",[s("li",[t._v("AtomicInteger：整形原子类")]),t._v(" "),s("li",[t._v("AtomicLong：长整型原子类")]),t._v(" "),s("li",[t._v("AtomicBoolean：布尔型原子类")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-数组类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-数组类型"}},[t._v("#")]),t._v(" "),s("strong",[t._v("2.2 数组类型")])]),t._v(" "),s("p",[t._v("使用原子的方式更新数组里的某个元素")]),t._v(" "),s("ul",[s("li",[t._v("AtomicIntegerArray：整形数组原子类")]),t._v(" "),s("li",[t._v("AtomicLongArray：长整形数组原子类")]),t._v(" "),s("li",[t._v("AtomicReferenceArray：引用类型数组原子类")])]),t._v(" "),s("h3",{attrs:{id:"_2-3-引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-引用类型"}},[t._v("#")]),t._v(" 2.3 "),s("strong",[t._v("引用类型")])]),t._v(" "),s("ul",[s("li",[t._v("AtomicReference：引用类型原子类")]),t._v(" "),s("li",[t._v("AtomicStampedReference：原子更新引用类型里的字段原子类")]),t._v(" "),s("li",[t._v("AtomicMarkableReference ：原子更新带有标记位的引用类型")])]),t._v(" "),s("h3",{attrs:{id:"_2-4-对象的属性修改类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-对象的属性修改类型"}},[t._v("#")]),t._v(" "),s("strong",[t._v("2.4 对象的属性修改类型")])]),t._v(" "),s("ul",[s("li",[t._v("AtomicIntegerFieldUpdater：原子更新整形字段的更新器")]),t._v(" "),s("li",[t._v("AtomicLongFieldUpdater：原子更新长整形字段的更新器")]),t._v(" "),s("li",[t._v("AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。")])]),t._v(" "),s("h2",{attrs:{id:"_3-带版本号的原子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-带版本号的原子类"}},[t._v("#")]),t._v(" 3. 带版本号的原子类")]),t._v(" "),s("p",[t._v("通过原子的方式更新单个变量的原子类的升级版，Atomic包提供了以下2个类：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. AtomicMarkableReference< V >：维护带有标记位的对象引用，可以原子方式对其进行更新。\n2. AtomicStampedReference< V >：维护带有整数标志的对象引用，可用原子方式对其进行更新。\n")])])]),s("p",[t._v("上面两个原子类的方法以及原理几乎一致，属于带有版本号的原子类。")]),t._v(" "),s("h3",{attrs:{id:"_3-1-为什么需要带版本号-aba问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-为什么需要带版本号-aba问题"}},[t._v("#")]),t._v(" 3.1 为什么需要带版本号？（ABA问题）")]),t._v(" "),s("p",[t._v("我们知道CAS操作的三大问题之一就是“ABA”问题："),s("strong",[t._v("CAS在操作值的时候，需要检查预期值有没有发生变化，如果没有发生变化则更新。但是，如果一个线程t1首先获取了预期值A，此时另一个线程t2则将值从A变成了B，随后又变成了A，随后t1再使用CAS进行比较交换的时候，会发现它的预期值“没有变化”，但实际上是变化过的。这就是ABA问题的由来")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"_3-2-如何解决aba问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-如何解决aba问题"}},[t._v("#")]),t._v(" 3.2 如何解决ABA问题")]),t._v(" "),s("p",[t._v("ABA问题的解决思路就是使用版本号，1A->2B->3A，在Atomic包中，提供了一个现成的AtomicStampedReference类来解决ABA问题，使用的就是添加版本号的方法。还有一个AtomicMarkableReference实现类，它比AtomicStampedReference更加简单，AtomicStampedReference中每更新一次数据版本号也会更新一次，这样可以使用版本号统计到底更新了多少次，而AtomicMarkableReference仅仅使用了一个boolean值来表示值是否改变过，因此使用的比较少。")]),t._v(" "),s("h2",{attrs:{id:"_4-atomicinteger-的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-atomicinteger-的使用"}},[t._v("#")]),t._v(" 4. AtomicInteger 的使用")]),t._v(" "),s("p",[s("strong",[t._v("AtomicInteger 类常用方法")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取当前的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取当前的值，并设置新的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndIncrement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取当前的值，并自增")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndDecrement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取当前的值，并自减")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAndAdd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" delta"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取当前的值，并加上预期的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果输入的数值等于预期值，则以原子方式将该值设置为输入值（update）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lazySet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//最终设置为newValue,使用 lazySet 设置之后可能导致其他线程在之后的一小段时间内还是可以读到旧的值。")]),t._v("\n")])])]),s("p",[s("strong",[t._v("AtomicInteger 类的使用示例")])]),t._v(" "),s("p",[t._v("使用 AtomicInteger 之后，不用对 increment() 方法加锁也可以保证线程安全。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicIntegerTest")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),t._v(" count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//使用AtomicInteger之后，不需要对该方法加锁，也可以实现线程安全。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("increment")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                  count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("incrementAndGet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n     \n       "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCount")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"_5-atomicinteger-类的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-atomicinteger-类的原理"}},[t._v("#")]),t._v(" 5. AtomicInteger 类的原理")]),t._v(" "),s("p",[t._v("AtomicInteger 类的部分源码：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// setup to use Unsafe.compareAndSwapInt for updates（更新操作时提供“比较并替换”的作用）")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unsafe")]),t._v(" unsafe "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Unsafe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getUnsafe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" valueOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            valueOffset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objectFieldOffset\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AtomicInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDeclaredField")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" ex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("AtomicInteger 类主要利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。")]),t._v(" "),s("p",[t._v("CAS的原理是拿期望的值和原本的一个值作比较，如果相同则更新成新的值。UnSafe 类的 objectFieldOffset() 方法是一个本地方法，这个方法是用来拿到“原来的值”的内存地址，返回值是 valueOffset。另外 value 是一个volatile变量，在内存中可见，因此 JVM 可以保证任何时刻任何线程总能拿到该变量的最新值。")]),t._v(" "),s("h2",{attrs:{id:"_6-jdk1-8中新增的原子加强类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-jdk1-8中新增的原子加强类"}},[t._v("#")]),t._v(" 6. JDK1.8中新增的原子加强类")]),t._v(" "),s("h3",{attrs:{id:"_6-1-jdk1-8-新增的原子加强类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-jdk1-8-新增的原子加强类"}},[t._v("#")]),t._v(" 6.1 jdk1.8 新增的原子加强类")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1. LongAdder：long类型的数值累加器，从0开始累加，累加规则为加法运算。\n2. LongAccumulator：long类型的数值累加器，可从指定值开始累加，可指定累加规则。\n3. DoubleAdder：double类型的数值累加器，从0开始累加，累加规则为加法运算。\n4. DoubleAccumulator：double类型的数值累加器，可从指定值开始累加，可指定累加规则。\n")])])]),s("h3",{attrs:{id:"_6-2-为什么需要加强"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-为什么需要加强"}},[t._v("#")]),t._v(" 6.2 为什么需要加强")]),t._v(" "),s("p",[t._v("自从原子类问世之后，"),s("strong",[t._v("多线程环境下如果用于统计计数操作，一般可以使用AtomicLong来代替锁作为计数器")]),t._v("，AtomicLong 通过CAS 提供了非阻塞的原子性操作，相比使用阻塞算法的同步器来说它的性能己经很好了，那么，它们有什么缺点吗？")]),t._v(" "),s("p",[t._v("实际上，AtomicLong等其他传统的atomic原子类对于数值的更改，通常都是"),s("strong",[t._v("在一个无限循环（自旋）中不断尝试CAS 的修改操作，一旦CAS失败则循环重试，这样来保证最终CAS操作成功")]),t._v("。如果竞争不激烈，那么修改成功的概率就很高，但是如果"),s("strong",[t._v("在高并发下大量线程频繁的竞争修改计数器，会造成一次CAS修改失败的概率就很高")]),t._v("。在大量修改失败时，这些原子操作就会进行多次循环尝试**，白白浪费CPU 资源，因此性能还是会受到影响**。")]),t._v(" "),s("p",[s("strong",[t._v("JDK1.8新增这些类，正是为了解决高并发环境下由于频繁读写AtomicLong等计数器而可能造成某些线程持续的空转（循环）进而浪费CPU的情况，它们也被称为“累加器”！")])]),t._v(" "),s("h2",{attrs:{id:"_7-atomic-合适场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-atomic-合适场景"}},[t._v("#")]),t._v(" 7. atomic 合适场景")]),t._v(" "),s("p",[s("strong",[t._v("单个变量的复合操作（比如读-写）中可以代替锁的来保证操作的原子性和安全性，并且由于没有使用锁而有不错的性能")])]),t._v(" "),s("blockquote",[s("p",[t._v("对于多个变量的复合操作以及一批代码的原子性和安全性却无能为力，此时只能使用锁。")])]),t._v(" "),s("h2",{attrs:{id:"_8-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-总结"}},[t._v("#")]),t._v(" 8. 总结")]),t._v(" "),s("p",[t._v("实际上volatile关键字以及Unsafe类提供的CAS的方法就是构成原子类的基石，原子类的方法实际上就是对于Unsafe中的CAS方法的二次包装，方便开发人员使用而已。Unsafe中的CAS方法作为native方法，本身并不是Java语言实现的，它们的源码位于JVM虚拟机的源码中，HotSpot虚拟机的源码中就有这些native方法的具体实现，它们都是采用C++的代码实现的，方便与底层系统交互，在openjdk中可以找到。")]),t._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[t._v("#")]),t._v(" 参考文章")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/weixin_43767015/article/details/107895944",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java atomic原子操作类的介绍"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);