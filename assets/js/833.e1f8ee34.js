(window.webpackJsonp=window.webpackJsonp||[]).push([[833],{1211:function(a,t,s){"use strict";s.r(t);var e=s(26),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"redis的主从同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#redis的主从同步"}},[a._v("#")]),a._v(" Redis的主从同步")]),a._v(" "),s("h2",{attrs:{id:"_1-主从同步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-主从同步"}},[a._v("#")]),a._v(" 1. 主从同步")]),a._v(" "),s("p",[a._v("和MySQL主从复制的原因一样，Redis虽然读取写入的速度都特别快，但是也会产生读压力特别大的情况。为了分担读压力，Redis支持主从复制，Redis的主从结构可以采用一主多从或者级联结构，下图为级联结构。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://zszblog.oss-cn-beijing.aliyuncs.com/zszblog/blogimage-master/image-20210411205126388.png",alt:"image-20210411205126388"}})]),a._v(" "),s("h2",{attrs:{id:"_2-同步机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-同步机制"}},[a._v("#")]),a._v(" 2. 同步机制")]),a._v(" "),s("p",[a._v("Redis主从复制可以根据是否是全量分为全量同步和增量同步。")]),a._v(" "),s("ul",[s("li",[a._v("全量同步：Redis全量复制一般发生在Slave初始化阶段，这时Slave需要将Master上的所有数据都复制一份")]),a._v(" "),s("li",[a._v("增量同步：redis运行过程中的修改同步")])]),a._v(" "),s("h3",{attrs:{id:"_2-1-全量同步过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-全量同步过程"}},[a._v("#")]),a._v(" 2.1 全量同步过程")]),a._v(" "),s("ol",[s("li",[a._v("salve 发送sync命令到master")]),a._v(" "),s("li",[a._v("master收到这条指令后，会执行BGSAVE命令启动一个备份进程，将所有数据写到rdb文件中去")]),a._v(" "),s("li",[a._v("master将保存数据快照期间接收到的写命令缓存起来")]),a._v(" "),s("li",[a._v("master完成写文件操作后，将该文件发送给salve")]),a._v(" "),s("li",[a._v("使用新的AOF文件替换掉旧的AOF文件")]),a._v(" "),s("li",[a._v("Master将这期间收集的增量写命令发送到salve端")])]),a._v(" "),s("h3",{attrs:{id:"_2-2-增量同步过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-增量同步过程"}},[a._v("#")]),a._v(" 2.2 增量同步过程")]),a._v(" "),s("ol",[s("li",[a._v("Master接收到用户的操作命令，判断是否需要传播到Slave")]),a._v(" "),s("li",[a._v("如果需要同步，则将操作记录到AOF文件")]),a._v(" "),s("li",[a._v("遍历所有的slave，将操作的指令和参数写入到slave的缓存中")]),a._v(" "),s("li",[a._v("将缓存中的数据发送给Slave")])]),a._v(" "),s("h2",{attrs:{id:"_3-主从模式弊端-哨兵模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-主从模式弊端-哨兵模式"}},[a._v("#")]),a._v(" 3. 主从模式弊端（哨兵模式）")]),a._v(" "),s("p",[a._v("master挂掉之后，就不能进行写操作")]),a._v(" "),s("p",[a._v("Redis 主从复制有一个很大的缺点就是没有办法对 master 进行动态选举（当 master 挂掉后，会通过一定的机制，从 slave 中选举出一个新的 master），需要使用 Sentinel 机制完成动态选举")]),a._v(" "),s("h4",{attrs:{id:"_2-2-1-哨兵进程的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-哨兵进程的作用"}},[a._v("#")]),a._v(" 2.2.1 哨兵进程的作用")]),a._v(" "),s("ul",[s("li",[a._v("监控：检查主从服务器是否运行正常")]),a._v(" "),s("li",[a._v("提醒：通过API向管理员或者其他应用程序发送故障通知")]),a._v(" "),s("li",[a._v("自动故障迁移：主从切换")])]),a._v(" "),s("h2",{attrs:{id:"参考文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://blog.csdn.net/sk199048/article/details/50725369",target:"_blank",rel:"noopener noreferrer"}},[a._v("Redis主从同步原理-SYNC"),s("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=r.exports}}]);