(window.webpackJsonp=window.webpackJsonp||[]).push([[1062],{1436:function(_,t,v){"use strict";v.r(t);var r=v(26),a=Object(r.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"如何合理配置线程池的大小"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何合理配置线程池的大小"}},[_._v("#")]),_._v(" 如何合理配置线程池的大小")]),_._v(" "),v("h2",{attrs:{id:"_1-理论背景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-理论背景"}},[_._v("#")]),_._v(" 1. 理论背景")]),_._v(" "),v("p",[_._v("一般需要根据任务的类型来配置线程池大小：")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("如果是CPU密集型任务，"),v("strong",[_._v("就需要尽量压榨CPU")]),_._v("，应配置尽可能小的线程，参考值可以设为 "),v("em",[_._v("N")]),_._v("CPU+1")])]),_._v(" "),v("li",[v("p",[_._v("如果是IO密集型任务，"),v("strong",[_._v("因为IO操作不占用CPU")]),_._v("，不要让CPU闲下来，应加大线程数量,参考值可以设置为2NCPU+1")])])]),_._v(" "),v("p",[_._v("当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。")]),_._v(" "),v("h2",{attrs:{id:"_2-什么是io秘籍和cpu-秘籍"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是io秘籍和cpu-秘籍"}},[_._v("#")]),_._v(" 2. 什么是io秘籍和CPU 秘籍")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("io密集型（要减少请求数量或请求大小）")]),_._v(" "),v("ol",[v("li",[_._v("数据库操作")]),_._v(" "),v("li",[_._v("网络请求操作")])])]),_._v(" "),v("li",[v("p",[_._v("cpu 密集型")]),_._v(" "),v("ol",[v("li",[_._v("程序计算")])])])]),_._v(" "),v("h2",{attrs:{id:"_3-实例测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-实例测试"}},[_._v("#")]),_._v(" 3. 实例测试")]),_._v(" "),v("p",[_._v("在做数据清理时，需要查询数据库，做数据清洗完成后，再保存到数据库")]),_._v(" "),v("p",[v("strong",[_._v("测试逻辑步骤")])]),_._v(" "),v("ol",[v("li",[_._v("查询出总记录数")]),_._v(" "),v("li",[_._v("每100条记录划分一组在线程池中操作")])]),_._v(" "),v("blockquote",[v("p",[_._v("我win 核心线程为4")])]),_._v(" "),v("blockquote",[v("p",[_._v("不使用多线程的时候，每分钟执行500条")])]),_._v(" "),v("p",[_._v("改用多线程后")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("线程数")]),_._v(" "),v("th",[_._v("每分钟执行条数")]),_._v(" "),v("th",[_._v("5分钟执行条数")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("核心线程数5，最大线程数10")]),_._v(" "),v("td",[_._v("4400（初次线程停顿条数1100）")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("核心线程数10，最大线程数20")]),_._v(" "),v("td",[_._v("8400（初次线程停顿条数2100）")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("核心线程数20，最大线程数40")]),_._v(" "),v("td",[_._v("12300（初次线程停顿条数4100）")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("核心线程数30，最大线程数60")]),_._v(" "),v("td",[_._v("18300（初次线程停顿条数6100）")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("核心线程数40，最大线程数80")]),_._v(" "),v("td",[_._v("24300（初次线程停顿条数8100）")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("核心线程数50，最大线程数100")]),_._v(" "),v("td",[_._v("26716（初次线程停顿条数9994）")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("核心线程数60，最大线程数120")]),_._v(" "),v("td",[_._v("27300（初次线程停顿条数9854）")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("核心线程数70，最大线程数140")]),_._v(" "),v("td",[_._v("19942（初次线程停顿条数9747）")]),_._v(" "),v("td")]),_._v(" "),v("tr",[v("td",[_._v("核心线程数80，最大线程数160")]),_._v(" "),v("td",[_._v("29770（初次线程停顿条数9747）")]),_._v(" "),v("td")])])]),_._v(" "),v("p",[_._v("初次线程停顿条数：清理到数据库中的数据从0开始到一个稳定的数（线程池差不多同一时间执行完毕的，过渡到其他线程）")]),_._v(" "),v("p",[_._v("该实验建立在每分钟的基础上。每个线程执行时间15-20s左右。那1分钟执行3-4次。所以误差比较明显")]),_._v(" "),v("h3",{attrs:{id:"_3-1-实验分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-实验分析"}},[_._v("#")]),_._v(" 3.1 实验分析")]),_._v(" "),v("p",[_._v("实现出的结果显示2n+1 的结论。线程数量还远不能达到最佳线程。继续查阅资料发现一个估算公式")]),_._v(" "),v("blockquote",[v("p",[_._v("最佳线程数目 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目")])]),_._v(" "),v("p",[_._v("比如平均每个线程 CPU 运行时间为 0.5s，而线程等待时间（非 CPU 运行时间，比如 IO）为 1.5s，CPU 核心数为 8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)*8=32。这个公式进一步转化为：")]),_._v(" "),v("blockquote",[v("p",[_._v("最佳线程数目 = （线程等待时间与线程CPU时间之比 + 1）* CPU数目")])]),_._v(" "),v("p",[v("strong",[_._v("线程等待时间所占比例越高，需要越多线程。线程 CPU 时间所占比例越高，需要越少线程。")])]),_._v(" "),v("p",[_._v("一个系统最快的部分是 CPU，所以决定一个系统吞吐量上限的是 CPU。增强 CPU 处理能力，可以提高系统吞吐量上限。但根据短板效应，真实的系统吞吐量并不能单纯根据 CPU 来计算。那要提高系统吞吐量，就需要从 “系统短板”（比如网络延迟、IO）着手：")]),_._v(" "),v("ul",[v("li",[_._v("尽量提高短板操作的并行化比率，比如多线程下载技术")]),_._v(" "),v("li",[_._v("增强短板能力，比如用 NIO 替代 IO")])]),_._v(" "),v("h2",{attrs:{id:"代码测算"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码测算"}},[_._v("#")]),_._v(" 代码测算")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://github.com/sunshanpeng/dark_magic",target:"_blank",rel:"noopener noreferrer"}},[_._v("合理估算java的线程池大小及队列数"),v("OutboundLink")],1)]),_._v(" "),v("h2",{attrs:{id:"参考文章"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[_._v("#")]),_._v(" 参考文章")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://blog.csdn.net/feilang00/article/details/95940059?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-2&spm=1001.2101.3001.4242",target:"_blank",rel:"noopener noreferrer"}},[_._v("如何合理地估算线程池大小？"),v("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);