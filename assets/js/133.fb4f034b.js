(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{508:function(s,a,t){"use strict";t.r(a);var n=t(26),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"linux文本操作命令汇总"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux文本操作命令汇总"}},[s._v("#")]),s._v(" Linux文本操作命令汇总")]),s._v(" "),t("h2",{attrs:{id:"_1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[s._v("#")]),s._v(" 1. 简介")]),s._v(" "),t("p",[s._v("Linux常用文本操作命令，包括wc(统计)、cut(切分)、sort(排序)、uniq(去重)、grep(查找)、sed(替换、插入、删除)、awk(文本分析)。")]),s._v(" "),t("h2",{attrs:{id:"_2-sed替换-查找-删除命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-sed替换-查找-删除命令"}},[s._v("#")]),s._v(" 2. sed替换/查找/删除命令")]),s._v(" "),t("h3",{attrs:{id:"_2-1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-简介"}},[s._v("#")]),s._v(" 2.1 简介")]),s._v(" "),t("p",[s._v("sed是一个很好的文件处理工具，本身是一个管道命令，主要是以行为单位进行处理，可以将数据行进行替换、删除、新增、选取等特定工作")]),s._v(" "),t("h3",{attrs:{id:"_2-2-sed-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-sed-语法"}},[s._v("#")]),s._v(" 2.2 sed 语法")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("sed [-nefri] ‘command’ 输入文本 \n")])])]),t("h3",{attrs:{id:"_2-3-常用选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-常用选项"}},[s._v("#")]),s._v(" 2.3 常用选项")]),s._v(" "),t("ul",[t("li",[s._v("-n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。")]),s._v(" "),t("li",[s._v("-e∶直接在指令列模式上进行 sed 的动作编辑；")]),s._v(" "),t("li",[s._v("-f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；")]),s._v(" "),t("li",[s._v("-r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)")]),s._v(" "),t("li",[s._v("-i∶直接修改读取的档案内容，而不是由萤幕输出。")])]),s._v(" "),t("h3",{attrs:{id:"_2-4-常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-常用命令"}},[s._v("#")]),s._v(" 2.4 "),t("strong",[s._v("常用命令")])]),s._v(" "),t("ul",[t("li",[s._v("a  ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～")]),s._v(" "),t("li",[s._v("c  ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！")]),s._v(" "),t("li",[s._v("d  ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；")]),s._v(" "),t("li",[s._v("i  ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；")]),s._v(" "),t("li",[s._v("p ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～")]),s._v(" "),t("li",[s._v("s ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！")])]),s._v(" "),t("h3",{attrs:{id:"_2-5-示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-示例"}},[s._v("#")]),s._v(" 2.5 示例")]),s._v(" "),t("p",[s._v("假设我们有一文件名为my.txt。内容如下")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("Hello!\nwelcome to my blog.\nend\n")])])]),t("h4",{attrs:{id:"_2-5-1-删除某行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-1-删除某行"}},[s._v("#")]),s._v(" 2.5.1 删除某行")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed '1d' my.txt              #删除第一行 ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed '$d' my.txt              #删除最后一行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed '1,2d' my.txt           #删除第一行到第二行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed '2,$d' my.txt           #删除第二行到最后一行")]),s._v("\n")])])]),t("h4",{attrs:{id:"_2-5-2-显示某行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-2-显示某行"}},[s._v("#")]),s._v(" 2.5.2 显示某行：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed -n '1p' my.txt           #显示第一行 ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed -n '$p' my.txt           #显示最后一行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed -n '1,2p' my.txt        #显示第一行到第二行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed -n '2,$p' my.txt        #显示第二行到最后一行")]),s._v("\n")])])]),t("h4",{attrs:{id:"_2-5-3-使用模式进行查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-3-使用模式进行查询"}},[s._v("#")]),s._v(" 2.5.3 使用模式进行查询：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed -n '/blog/p' my.txt    #查询包括关键字blog所在所有行")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed -n '/\\$/p' my.txt        #查询包括关键字$所在所有行，使用反斜线\\屏蔽特殊含义")]),s._v("\n")])])]),t("h4",{attrs:{id:"_2-5-4-增加一行或多行字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-4-增加一行或多行字符串"}},[s._v("#")]),s._v(" 2.5.4 增加一行或多行字符串：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat my.txt")]),s._v("\n     Hello"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n     ruby is me,welcome to my blog.\n     end\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed '1a drink tea' my.txt  #第一行后增加字符串\"drink tea\"")]),s._v("\n     Hello"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n     drink tea\n     ruby is me,welcome to my blog. \n     end\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed '1,3a drink tea' my.txt #第一行到第三行后增加字符串\"drink tea\"")]),s._v("\n     Hello"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n     drink tea\n     ruby is me,welcome to my blog.\n     drink tea\n     end\n     drink tea\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sed '1a drink tea\\nor coffee' my.txt   #第一行后增加多行，使用换行符\\n")]),s._v("\n     Hello"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\n     drink tea\n     or coffee\n     ruby is me,welcome to my blog.\n     end\n")])])]),t("h4",{attrs:{id:"_2-5-5-删除匹配行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-5-删除匹配行"}},[s._v("#")]),s._v(" 2.5.5 删除匹配行：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/匹配字符串/d'")]),s._v("  filename  （注：若匹配字符串是变量，则需要“”，而不是‘’。记得好像是）\n")])])]),t("h4",{attrs:{id:"_2-5-6-替换匹配行中的某个字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-6-替换匹配行中的某个字符串"}},[s._v("#")]),s._v(" 2.5.6 替换匹配行中的某个字符串：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sed")]),s._v(" -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/匹配字符串/s/替换源字符串/替换目标字符串/g'")]),s._v(" filename\n")])])]),t("h2",{attrs:{id:"_3-awk强大的文本分析命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-awk强大的文本分析命令"}},[s._v("#")]),s._v(" 3 awk强大的文本分析命令")]),s._v(" "),t("h3",{attrs:{id:"_3-1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-简介"}},[s._v("#")]),s._v(" 3.1 简介")]),s._v(" "),t("p",[s._v("awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。")]),s._v(" "),t("h3",{attrs:{id:"_3-2-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-语法"}},[s._v("#")]),s._v(" 3.2 语法")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{pattern + action}'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("filenames"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。")]),s._v(" "),t("p",[s._v("awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。")]),s._v(" "),t("p",[s._v("通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。")]),s._v(" "),t("h3",{attrs:{id:"_3-3-awk入门"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-awk入门"}},[s._v("#")]),s._v(" 3.3 awk入门")]),s._v(" "),t("p",[s._v("假设last -n 5的输出如下：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  last -n 5 # 仅取出前五行")]),s._v("\nroot     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.18     Thu Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":22   still logged "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   \nroot     pts/2        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.18     Thu Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":22   still logged "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v("   \nroot     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.18     Thu Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":30 - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":13  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00:43"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    \nroot     pts/2        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.18     Thu Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":30 - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":13  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00:43"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    \nroot     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.12     Tue Apr "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":35 - "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(":52  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00:17"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n")])])]),t("p",[s._v("如果只是显示最近登录的5个帐号：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# last -n 5 | awk  '{print $1}'")]),s._v("\nroot\nroot\nroot\nroot\nroot\n")])])]),t("p",[s._v('awk工作流程是这样的：读入有\'\\n\'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，0则表示所有域,0则表示所有域,1表示第一个域,𝑛表示第𝑛个域。默认域分隔符是"空白键"或"[𝑡𝑎𝑏]键",所以n表示第n个域。默认域分隔符是"空白键"或"[tab]键",所以1表示登录用户，$3表示登录用户ip,以此类推。')]),s._v(" "),t("p",[s._v("如果只是显示/etc/passwd的账户：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/passwd |awk  -F ':'  '{print $1}'  ")]),s._v("\nroot\nbin\ndaemon\nadm\nlp\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sync")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("halt")]),s._v("\nmail\n")])])]),t("p",[s._v("这种是awk+action的示例，每行都会执行action{print $1}。")]),s._v(" "),t("p",[t("strong",[s._v("-F指定域分隔符为':'。")])]),s._v(" "),t("p",[s._v("如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/passwd |awk  -F ':'  '{print $1\"\\t\"$7}'")]),s._v("\nroot    /bin/bash\nbin     /sbin/nologin\ndaemon  /sbin/nologin\nadm     /sbin/nologin\n\n")])])]),t("p",[s._v('如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加"blue,/bin/nosh"：')]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# cat /etc/passwd |awk  -F \':\'  \'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}\'')]),s._v("\nname,shell\nroot,/bin/bash\nbin,/sbin/nologin\ndaemon,/sbin/nologin\nadm,/sbin/nologin\nlp,/sbin/nologin\nsync,/bin/sync\n\n")])])]),t("p",[s._v("awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，0则表示所有域,0则表示所有域,1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。")]),s._v(" "),t("p",[s._v("搜索/etc/passwd有root关键字的所有行：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# awk -F: '/root/{print $7}' /etc/passwd   ")]),s._v("\n/bin/bash\n/sbin/nologin\n\n")])])]),t("p",[s._v("这里指定了action{print $7}。")]),s._v(" "),t("h3",{attrs:{id:"_3-4-awk-进阶"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-awk-进阶"}},[s._v("#")]),s._v(" 3.4 awk 进阶")]),s._v(" "),t("h4",{attrs:{id:"_3-4-1-内置变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-1-内置变量"}},[s._v("#")]),s._v(" 3.4.1 内置变量")]),s._v(" "),t("p",[s._v("awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("ARGC               命令行参数个数\nARGV               命令行参数排列\nENVIRON            支持队列中系统环境变量的使用\nFILENAME           awk浏览的文件名\nFNR                浏览文件的记录数\nFS                 设置输入域分隔符，等价于命令行 -F选项\nNF                 浏览记录的域的个数\nNR                 已读的记录数\nOFS                输出域分隔符\nORS                输出记录分隔符\nRS                 控制记录分隔符\n")])])]),t("p",[s._v("此外,0变量是指整条记录。0变量是指整条记录。1表示当前行的第一个域,$2表示当前行的第二个域,......以此类推。")]),s._v(" "),t("p",[s._v("统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# awk  -F \':\'  \'{print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0}\' /etc/passwd')]),s._v("\nfilename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash\nfilename:/etc/passwd,linenumber:2,columns:7,linecontent:bin:x:1:1:bin:/bin:/sbin/nologin\nfilename:/etc/passwd,linenumber:3,columns:7,linecontent:daemon:x:2:2:daemon:/sbin:/sbin/nologin\nfilename:/etc/passwd,linenumber:4,columns:7,linecontent:adm:x:3:4:adm:/var/adm:/sbin/nologin\nfilename:/etc/passwd,linenumber:5,columns:7,linecontent:lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\nfilename:/etc/passwd,linenumber:6,columns:7,linecontent:sync:x:5:0:sync:/sbin:/bin/sync\n\n")])])]),t("h4",{attrs:{id:"_3-4-2-变量和赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-2-变量和赋值"}},[s._v("#")]),s._v(" 3.4.2 变量和赋值")]),s._v(" "),t("p",[s._v("除了awk的内置变量，awk还可以自定义变量。")]),s._v(" "),t("p",[s._v("下面统计/etc/passwd的账户人数：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{count++;print "),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v(';} END{print "user count is ", count}\'')]),s._v(" /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nuser count is  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v("\n")])])]),t("p",[s._v("count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。")]),s._v(" "),t("p",[s._v("这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'BEGIN {count=0;print "[start]user count is ", count} {count=count+1;print '),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$0")]),s._v(';} END{print "[end]user count is ", count}\'')]),s._v(" /etc/passwd\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("start"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("user count is  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nroot:x:0:0:root:/root:/bin/bash\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nnexus:x:1001:1001::/home/nexus:/bin/bash\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("end"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("user count is  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),s._v("\n")])])]),t("h4",{attrs:{id:"_3-4-3-条件语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-3-条件语句"}},[s._v("#")]),s._v(" 3.4.3 条件语句")]),s._v(" "),t("p",[s._v("awk中的条件语句是从C语言中借鉴来的，用法与C语言一致。")]),s._v(" "),t("p",[s._v("统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#ls -l |awk \'BEGIN {size=0;print "[start]size is ", size} {if($5!=4096){size=size+$5;}} END{print "[end]size is ", size/1024/1024,"M"}\' ')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("end"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("size is  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.22339")]),s._v(" M\n")])])]),t("h4",{attrs:{id:"_3-4-4-循环语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-4-循环语句"}},[s._v("#")]),s._v(" 3.4.4 循环语句")]),s._v(" "),t("p",[s._v("awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。")]),s._v(" "),t("h4",{attrs:{id:"_3-4-5-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-5-数组"}},[s._v("#")]),s._v(" 3.4.5 数组")]),s._v(" "),t("p",[s._v("因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。")]),s._v(" "),t("p",[s._v("显示/etc/passwd的账户：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#awk -F ':' 'BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i < NR; i++) print i, name[i]}' /etc/passwd")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" root\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" daemon\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" bin\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" sys\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sync")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" games\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("\n")])])]),t("p",[s._v("这里使用for循环遍历数组。")]),s._v(" "),t("h2",{attrs:{id:"_4-wc统计命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-wc统计命令"}},[s._v("#")]),s._v(" 4 wc统计命令")]),s._v(" "),t("h3",{attrs:{id:"_4-1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-简介"}},[s._v("#")]),s._v(" 4.1 简介")]),s._v(" "),t("p",[s._v("统计文件里面有多少单词，多少行，多少字符。")]),s._v(" "),t("h3",{attrs:{id:"_4-2-wc语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-wc语法"}},[s._v("#")]),s._v(" 4.2 wc语法")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v(" wc [-lwm]\n")])])]),t("p",[s._v("选项与参数：\n-l  ：仅列出行；\n-w  ：仅列出多少字(英文单字)；\n-m  ：多少字符；")]),s._v(" "),t("h3",{attrs:{id:"_4-3-wc使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-wc使用"}},[s._v("#")]),s._v(" 4.3 wc使用")]),s._v(" "),t("div",{staticClass:"language-bach extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("wc /etc/passwd\n25   35 1095 /etc/passwd\n")])])]),t("p",[s._v("258是行数，462是单词数，6919是字节数")]),s._v(" "),t("p",[s._v("wc的命令比较简单使用，每个参数使用如下：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#wc -l /etc/passwd   #统计行数，在对记录数时，很常用\n/etc/passwd       #表示系统有40个账户\n#wc -w /etc/passwd  #统计单词出现次数\n/etc/passwd\n#wc -m /etc/passwd  #统计文件的字节数\n")])])]),t("h2",{attrs:{id:"_5-cut-切分命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-cut-切分命令"}},[s._v("#")]),s._v(" 5. cut 切分命令")]),s._v(" "),t("h3",{attrs:{id:"_5-1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-简介"}},[s._v("#")]),s._v(" 5.1 简介")]),s._v(" "),t("p",[s._v("cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。")]),s._v(" "),t("blockquote",[t("p",[s._v("如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。")])]),s._v(" "),t("h3",{attrs:{id:"_5-2-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-语法"}},[s._v("#")]),s._v(" 5.2 语法")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-bn"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 或 "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  或  "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-df"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("file"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),t("h3",{attrs:{id:"_5-3-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-参数"}},[s._v("#")]),s._v(" 5.3 参数")]),s._v(" "),t("ul",[t("li",[s._v("**-b ：**以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。")]),s._v(" "),t("li",[s._v("**-c ：**以字符为单位进行分割。")]),s._v(" "),t("li",[s._v("**-d ：**自定义分隔符，默认为制表符。")]),s._v(" "),t("li",[s._v("**-f ：**与-d一起使用，指定显示哪个区域。")]),s._v(" "),t("li",[s._v("**-n ：**取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的"),t("br"),s._v("范围之内，该字符将被写出；否则，该字符将被排除。")])]),s._v(" "),t("h3",{attrs:{id:"_5-4-如何定位到剪切内容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-如何定位到剪切内容"}},[s._v("#")]),s._v(" 5.4 如何定位到剪切内容")]),s._v(" "),t("p",[s._v("cut命令主要是接受三个定位方法：")]),s._v(" "),t("p",[s._v("第一，字节（bytes），用选项-b")]),s._v(" "),t("p",[s._v("第二，字符（characters），用选项-c")]),s._v(" "),t("p",[s._v("第三，域（fields），用选项-f")]),s._v(" "),t("h4",{attrs:{id:"_5-4-1-以-字节-为单位切分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-1-以-字节-为单位切分"}},[s._v("#")]),s._v(" 5.4.1 "),t("strong",[s._v("以“字节”为单位切分")])]),s._v(" "),t("p",[s._v("举个例子吧，当你执行who命令时，会输出类似如下的内容：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("who")]),s._v("\nroot     pts/2        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nroot     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),t("p",[s._v("如果我们想提取每一行的第4个字节，就这样：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("who|cut -b 4\nt\nt\n")])])]),t("p",[t("strong",[s._v("如果“字节”定位中，我想提取第1，第2、第3和第10个字节，怎么办?")])]),s._v(" "),t("p",[s._v("-b支持形如3-5的写法，而且多个定位之间用逗号隔开就成了。看看例子吧：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("who")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" -b "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("-3,10\nroop\nroop\n")])])]),t("p",[s._v("但有一点要注意，cut命令如果使用了-b选项，那么执行此命令时，cut会先把-b后面所有的定位进行从小到大排序，然后再提取。因此这跟我们书写的顺序没有关系。这个例子就可以说明这个问题：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("who|cut -b 10,1-3\nroop\nroop\n")])])]),t("h5",{attrs:{id:"_5-4-1-1-还有哪些类似-3-5-这样的小技巧-列举一下吧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-1-1-还有哪些类似-3-5-这样的小技巧-列举一下吧"}},[s._v("#")]),s._v(" 5.4.1.1　"),t("strong",[s._v("还有哪些类似“3-5”这样的小技巧，列举一下吧!")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# who|cut -b 3-")]),s._v("\not     pts/2        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\not     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# who")]),s._v("\nroot     pts/2        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nroot     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# who|cut -b -3")]),s._v("\nroo\nroo\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# who|cut -b 3-")]),s._v("\not     pts/2        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\not     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),t("p",[s._v("想必你也看到了，-3表示从第一个字节到第三个字节，而3-表示从第三个字节到行尾。如果你细心，你可以看到这两种情况下，都包括了第三个字节“c”。如果我执行who|cut -b -3,3-，你觉得会如何呢？答案是输出整行，不会出现连续两个重叠的c的。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("who")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" -b -3,3-\nroot     pts/2        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nroot     pts/3        "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2022")]),s._v("-04-24 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v(":17 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("223.104")]),s._v(".6.4"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n")])])]),t("h4",{attrs:{id:"_5-4-2-以-字符-为单位切分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-2-以-字符-为单位切分"}},[s._v("#")]),s._v(' 5.4.2 以"字符"为单位切分')]),s._v(" "),t("p",[s._v("下面例子你似曾相识，提取第1，第2，第3和第10个字符：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# who|cut -c 1-3,10")]),s._v("\nroop\nroop\n")])])]),t("p",[s._v("不过，看着怎么和-b没有什么区别啊？莫非-b和-c作用一样? 其实不然，看似相同，只是因为这个例子举的不好，who输出的都是单字节字符，所以用-b和-c没有区别，如果你提取中文，区别就看出来了，来，看看中文提取的情况：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[root@iZwz914d1peizv4h7laju4Z ~]# cat cut_ch.txt\n星期一\n星期二\n星期三\n星期四\n[root@iZwz914d1peizv4h7laju4Z ~]# cut -b 3 cut_ch.txt\n�\n�\n�\n�\n[root@iZwz914d1peizv4h7laju4Z ~]# cut -c 3 cut_ch.txt\n一\n二\n三\n四\n\n")])])]),t("p",[s._v("看到了吧，用-c则会以字符为单位，输出正常；而-b只会傻傻的以字节（8位二进制位）来计算，输出就是乱码。既然提到了这个知识点，就再补充一句，如果你学有余力，就提高一下。当遇到多字节字符时，可以使用-n选项，-n用于告诉cut不要将多字节字符拆开。")]),s._v(" "),t("blockquote",[t("p",[s._v("跟文档不太一样")])]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" cut_ch.txt "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cut")]),s._v(" -b "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n�\n�\n�\n�\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat cut_ch.txt |cut -nb 2")]),s._v("\n期\n期\n期\n期\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat cut_ch.txt |cut -nb 1,2,3")]),s._v("\n星期一\n星期二\n星期三\n星期四\n\n")])])]),t("h4",{attrs:{id:"_5-4-3-以-域-为单位切分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-3-以-域-为单位切分"}},[s._v("#")]),s._v(' 5.4.3 以"域"为单位切分')]),s._v(" "),t("p",[s._v("为什么会有“域”的提取呢，因为刚才提到的-b和-c只能在固定格式的文档中提取信息，而对于非固定格式的信息则束手无策。这时候“域”就派上用场了。如果你观察过/etc/passwd文件，你会发现，它并不像who的输出信息那样具有固定格式，而是比较零散的排放。但是，冒号在这个文件的每一行中都起到了非常重要的作用，冒号用来隔开每一个项。")]),s._v(" "),t("p",[s._v("我们很幸运，cut命令提供了这样的提取方式，具体的说就是设置“间隔符”，再设置“提取第几个域”，就OK了！")]),s._v(" "),t("p",[s._v("以/etc/passwd的前五行内容为例：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  cat /etc/passwd|head -n 5")]),s._v("\nroot:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/sbin/nologin\ndaemon:x:2:2:daemon:/sbin:/sbin/nologin\nadm:x:3:4:adm:/var/adm:/sbin/nologin\nlp:x:4:7:lp:/var/spool/lpd:/sbin/nologin\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/passwd|head -n 5|cut -d : -f 1")]),s._v("\nroot\nbin\ndaemon\nadm\nlp\n\n")])])]),t("p",[s._v("看到了吧，用-d来设置间隔符为冒号，然后用-f来设置我要取的是第一个域，再按回车，所有的用户名就都列出来了！呵呵 有成就感吧！")]),s._v(" "),t("p",[s._v("当然，在设定-f时，也可以使用例如3-5或者4-类似的格式：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/passwd|head -n 5|cut -d : -f 1,3-5")]),s._v("\nroot:0:0:root\nbin:1:1:bin\ndaemon:2:2:daemon\nadm:3:4:adm\nlp:4:7:lp\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/passwd|head -n 5|cut -d : -f 1,3-5,7")]),s._v("\nroot:0:0:root:/bin/bash\nbin:1:1:bin:/sbin/nologin\ndaemon:2:2:daemon:/sbin/nologin\nadm:3:4:adm:/sbin/nologin\nlp:4:7:lp:/sbin/nologin\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@iZwz914d1peizv4h7laju4Z ~"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/passwd|head -n 5|cut -d : -f -2")]),s._v("\nroot:x\nbin:x\ndaemon:x\nadm:x\nlp:x\n\n")])])]),t("h4",{attrs:{id:"_5-4-4-cut的弊端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-4-cut的弊端"}},[s._v("#")]),s._v(" 5.4.4 cut的弊端")]),s._v(" "),t("p",[t("strong",[s._v("如果遇到空格和制表符时，怎么分辨呢？我觉得有点乱，怎么办？")])]),s._v(" "),t("p",[s._v("有时候制表符确实很难辨认，有一个方法可以看出一段空格到底是由若干个空格组成的还是由一个制表符组成的。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("cat tab_space.txt\nthis is tab finish.\nthis is several space      finish.\n$ sed -n l tab_space.txt\nthis is tab\\tfinish.$\nthis is several space      finish.$\n")])])]),t("p",[s._v("看到了吧，如果是制表符（TAB），那么会显示为\\t符号，如果是空格，就会原样显示。通过此方法即可以判断制表符和空格了。注意，上面sed -n后面的字符是L的小写字母哦，不要看错。")]),s._v(" "),t("p",[t("strong",[s._v("我应该在cut -d中用什么符号来设定制表符或空格呢?")])]),s._v(" "),t("p",[s._v("其实cut的-d选项的默认间隔符就是制表符，所以当你就是要使用制表符的时候，完全就可以省略-d选项，而直接用－f来取域就可以了。如果你设定一个空格为间隔符，那么就这样：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$cat tab_space.txt |cut -d ' ' -f 1\nthis\nthis\n")])])]),t("p",[s._v("注意，两个单引号之间可确实要有一个空格哦，不能偷懒。而且，你只能在-d后面设置一个空格，可不许设置多个空格，因为cut只允许间隔符是一个字符。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ cat tab_space.txt |cut -d ' ' -f 1\ncut: the delimiter must be a single character\nTry `cut --help' for more information.\n")])])]),t("p",[s._v("此外，cut在处理多空格的时候会更麻烦，因为"),t("strong",[s._v("cut只擅长处理“以一个字符间隔”的文本内容。")])]),s._v(" "),t("h2",{attrs:{id:"_6-sort-排序命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-sort-排序命令"}},[s._v("#")]),s._v(" 6. sort 排序命令")]),s._v(" "),t("h3",{attrs:{id:"_6-1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-简介"}},[s._v("#")]),s._v(" 6.1 简介")]),s._v(" "),t("p",[s._v("sort命令是帮我们依据不同的数据类型进行排序")]),s._v(" "),t("blockquote",[t("p",[s._v("sort可针对文本文件的内容，以行为单位来排序。")])]),s._v(" "),t("h3",{attrs:{id:"_6-2-语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-语法"}},[s._v("#")]),s._v(" 6.2 语法")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("sort [-bcfMnrtk][源文件][-o 输出文件] \n")])])]),t("h3",{attrs:{id:"_6-3-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-参数"}},[s._v("#")]),s._v(" 6.3 参数")]),s._v(" "),t("ul",[t("li",[s._v("-b  忽略每行前面开始出的空格字符。")]),s._v(" "),t("li",[s._v("-c  检查文件是否已经按照顺序排序。")]),s._v(" "),t("li",[s._v("-f  排序时，忽略大小写字母。")]),s._v(" "),t("li",[s._v("-M  将前面3个字母依照月份的缩写进行排序。")]),s._v(" "),t("li",[s._v("-n  依照数值的大小排序。")]),s._v(" "),t("li",[s._v("-o<输出文件>  将排序后的结果存入指定的文件。")]),s._v(" "),t("li",[s._v("-r  以相反的顺序来排序。")]),s._v(" "),t("li",[s._v("-t<分隔字符>  指定排序时所用的栏位分隔字符。")]),s._v(" "),t("li",[s._v("-k 选择以哪个区间进行排序。")])]),s._v(" "),t("h3",{attrs:{id:"_6-4-示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-示例"}},[s._v("#")]),s._v(" 6.4 示例")]),s._v(" "),t("h4",{attrs:{id:"_6-4-1-示例1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-1-示例1"}},[s._v("#")]),s._v(" 6.4.1 示例1")]),s._v(" "),t("p",[s._v("sort将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" seq.txt\nbanana\napple\npear\norange\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" seq.txt\napple\nbanana\norange\npear\n")])])]),t("p",[s._v("用户可以保存排序后的文件内容，或把排序后的文件内容输出至打印机。下例中用户把排序后的文件内容保存到名为result的文件中。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" seq.txt "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" result\n")])])]),t("h4",{attrs:{id:"_6-4-2-示例2-sort的-u选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-2-示例2-sort的-u选项"}},[s._v("#")]),s._v(" 6.4.2 示例2:sort的-u选项")]),s._v(" "),t("p",[s._v("它的作用很简单，就是在输出行中去除重复行。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" seq.txt\nbanana\napple\npear\norange\npear\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" seq.txt\napple\nbanana\norange\npear\npear\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -u seq.txt\napple\nbanana\norange\npear\n")])])]),t("p",[s._v("pear由于重复被-u选项无情的删除了。")]),s._v(" "),t("h4",{attrs:{id:"_6-4-3-示例3-sort的-r选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-3-示例3-sort的-r选项"}},[s._v("#")]),s._v(" 6.4.3 示例3：sort的-r选项")]),s._v(" "),t("p",[s._v("sort默认的排序方式是升序，如果想改成降序，就加个-r就搞定了。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" number.txt\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" number.txt\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -r number.txt\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("h4",{attrs:{id:"_6-4-4-示例4-sort的-o选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-4-示例4-sort的-o选项"}},[s._v("#")]),s._v(" 6.4.4 示例4：sort的-o选项")]),s._v(" "),t("p",[s._v("由于sort默认是把结果输出到标准输出，所以需要用重定向才能将结果写入文件，形如sort filename > newfile。")]),s._v(" "),t("p",[s._v("但是，如果你想把排序结果输出到原文件中，用重定向可就不行了。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -r number.txt "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" number.txt\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" number.txt\n$\n")])])]),t("p",[s._v("看，竟然将number清空了。就在这个时候，-o选项出现了，它成功的解决了这个问题，让你放心的将结果写入原文件。这或许也是-o比重定向的唯一优势所在。")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" number.txt\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -r number.txt -o number.txt\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" number.txt\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n")])])]),t("h4",{attrs:{id:"_6-4-5-示例5-sort的-n选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-5-示例5-sort的-n选项"}},[s._v("#")]),s._v(" 6.4.5 示例5：sort的-n选项")]),s._v(" "),t("p",[s._v("你有没有遇到过10比2小的情况。我反正遇到过。出现这种情况是由于排序程序将这些数字按字符来排序了，排序程序会先比较1和2，显然1小，所以就将10放在2前面喽。这也是sort的一贯作风。我们如果想改变这种现状，就要使用-n选项，来告诉sort，“要以数值来排序”！")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cat")]),s._v(" number.txt\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" number.txt\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n$ "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v(" -n number.txt\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v("\n")])])]),t("h4",{attrs:{id:"_6-4-6-示例6-sort的-t选项和-k选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-6-示例6-sort的-t选项和-k选项"}},[s._v("#")]),s._v(" 6.4.6 示例6： sort的-t选项和-k选项")]),s._v(" "),t("p",[s._v("如果有一个文件的内容是这样：")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ cat facebook.txt\nbanana:30:5.5\napple:10:2.5\npear:90:2.3\norange:20:3.4\n")])])]),t("p",[s._v("这个文件有三列，列与列之间用冒号隔开了，第一列表示水果类型，第二列表示水果数量，第三列表示水果价格。那么我想以水果数量来排序，也就是以第二列来排序，如何利用sort实现？幸好，sort提供了-t选项，后面可以设定间隔符。指定了间隔符之后，就可以用-k来指定列数了。")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("$ sort -n -k 2 -t ‘:’ facebook.txt\napple:10:2.5\norange:20:3.4\nbanana:30:5.5\npear:90:2.3\n")])])]),t("h3",{attrs:{id:"_6-5-其他的sort常用选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-其他的sort常用选项"}},[s._v("#")]),s._v(" 6.5 其他的sort常用选项")]),s._v(" "),t("ul",[t("li",[s._v("-f 会将小写字母都转换为大写字母来进行比较，亦即忽略大小写")]),s._v(" "),t("li",[s._v("-c 会检查文件是否已排好序，如果乱序，则输出第一个乱序的行的相关信息，最后返回1")]),s._v(" "),t("li",[s._v("-C 会检查文件是否已排好序，如果乱序，不输出内容，仅返回1")]),s._v(" "),t("li",[s._v("-M 会以月份来排序，比如JAN小于FEB等等")]),s._v(" "),t("li",[s._v("-b 会忽略每一行前面的所有空白部分，从第一个可见字符开始比较。")])]),s._v(" "),t("h2",{attrs:{id:"_7-uniq-去重命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-uniq-去重命令"}},[s._v("#")]),s._v(" 7. uniq 去重命令")]),s._v(" "),t("h3",{attrs:{id:"_7-1-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-简介"}},[s._v("#")]),s._v(" 7.1 简介")]),s._v(" "),t("p",[s._v("uniq命令可以去除排序过的文件中的重复行")]),s._v(" "),t("blockquote",[t("p",[s._v("因此uniq经常和sort合用。也就是说，为了使uniq起作用，所有的重复行必须是相邻的。")])]),s._v(" "),t("h3",{attrs:{id:"_7-2-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-简介"}},[s._v("#")]),s._v(" 7.2 简介")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("uniq")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-icu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n选项与参数：\n-i   ：忽略大小写字符的不同；\n-c  ：进行计数\n-u  ：只显示唯一的行\n")])])]),t("h3",{attrs:{id:"_7-3-uniq-使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-uniq-使用"}},[s._v("#")]),s._v(" 7.3 uniq 使用")]),s._v(" "),t("p",[s._v("testfile的内容如下：")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat testfile")]),s._v("\nhello\nworld\nfriend\nhello\nworld\nhello\n")])])]),t("p",[s._v("直接删除未经排序的文件，将会发现没有任何行被删除:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#uniq testfile  ")]),s._v("\nhello\nworld\nfriend\nhello\nworld\nhello\n")])])]),t("p",[s._v("排序文件，默认是去重:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#cat words | sort |uniq")]),s._v("\nfriend\nhello\nworld\n")])])]),t("p",[s._v("排序之后删除了重复行，同时在行首位置输出该行重复的次数:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sort testfile | uniq -c")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" friend\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" hello\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" world\n")])])]),t("p",[s._v("仅显示存在重复的行，并在行首显示该行重复的次数:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sort testfile | uniq -dc")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" hello\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" world\n")])])]),t("p",[s._v("仅显示不重复的行:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#sort testfile | uniq -u")]),s._v("\nfriend \n")])])]),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[s._v("#")]),s._v(" 参考文章")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.cnblogs.com/maybe2030/p/5325530.html#_label5",target:"_blank",rel:"noopener noreferrer"}},[s._v("Linux文本操作命令"),t("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);